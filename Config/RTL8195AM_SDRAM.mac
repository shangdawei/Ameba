//--------------------------------------------------------------------------------------------------
//SDRAM Var
__var AddLat;
__var Bank;
__var BstLen;
__var BstType;
__var CasRd;
__var CasRdT;
__var CasWr;
__var ClrSrt;
__var CrTrtw;
__var CrTrtwT;
__var CrTwr;
__var CsBstLen;
__var DdrPeriodPs;
__var DdrType;
__var DeviceType;
__var DfiRate;
__var DqWidth;
__var Mode0Cas;
__var Mode0Wr;
__var Mode1AllLat;
__var Mode1DllEnN;
__var Mode2Cwl;
__var Page;
__var SDRAMEmr2;
__var SDRAMMaxWr;
__var SDRAMMr0;
__var SDRAMPeriod;
__var SDRAMRowNum;
__var SDRAMTimingTref;
__var SDRAMWr;
__var TccdTck;
__var Tck;
__var TmrdTck;
__var TrasPs;
__var TrcPs;
__var TrcdPs;
__var TrefiPs;
__var TrfcPs;
__var TrpPs;
__var TrrdTck;
__var TrtpTck;
__var TwrPs;
__var TwtrTck;
__var WrMaxTck;
__var err_cnt;
__var ok_cnt;
__var ok_pipe_id0;
__var ok_pipe_id1;
__var ok_tpc_max0;
__var ok_tpc_max1;
__var ok_tpc_min0;
__var ok_tpc_min1;
__var rdp;
__var rdp_reg;
__var tpc0_cnt;
__var tpc1_cnt;
__var tpc;
__var tpc_reg;

loadSdramParameter()
{
  __message "------------------------------ Load SDRAM Parameter -----------------------";

  //SDRAM_INFO
  DeviceType = 8; //SDRAM_SDR
  Page = 0; //SDRAM_COLADDR_8B
  Bank = 0; //SDRAM_BANK_2
  DqWidth = 0; //SDRAM_DQ_1

  //SDRAM_MODE_REG_INFO
  BstLen = 0; //BST_LEN_4
  BstType = 0; //SENQUENTIAL
  Mode0Cas = 3;
  Mode0Wr = 0;
  Mode1DllEnN = 0;
  Mode1AllLat = 0;
  Mode2Cwl = 0;

  //SDRAM_TIMING_INFO
  SDRAMTimingTref = 64000;
  SDRAMRowNum = 8192;

  //SDR 100MHZ==>10000, 50MHZ==>20000, 25MHZ==>40000, 12.5MHZ==>80000
  Tck = 80000; //SDR 12.5MHZ
  TrfcPs = 60000;
  TrefiPs = ( ( SDRAMTimingTref * 1000 ) / SDRAMRowNum ) * 1000;
  WrMaxTck = 2;
  TrcdPs = 15000;
  TrpPs = 15000;
  TrasPs = 42000;
  TrrdTck = 2;
  TwrPs = Tck * 2;
  TwtrTck = 0;
  TmrdTck = 2;
  TrtpTck = 0;
  TccdTck = 1;
  TrcPs = 60000;

  //SDRAM_DEVICE_INFO
  DdrPeriodPs = Tck;
  DfiRate = 0; //DFI_RATIO_1
}

configSdramParameter()
{
  __message "------------------------------ Config SDRAM Parameter ---------------------";

  __var tmp;

  DfiRate = 1 << DfiRate;
  SDRAMPeriod = DdrPeriodPs * DfiRate;
  SDRAMMaxWr = ( WrMaxTck ) / ( DfiRate ) + 1;
  SDRAMWr = ( ( TwrPs ) / SDRAMPeriod ) + 1;
  CrTwr = ( ( TwrPs ) / SDRAMPeriod ) + 3;

  if ( CrTwr < SDRAMMaxWr )
  {
    CrTwr = CrTwr;
  }
  else
  {
    CrTwr = SDRAMMaxWr;
  }

  if ( DeviceType == 2 )
  {
    DdrType = 2; // Case DDR2

    if ( BstLen == 0 )
    {
      CsBstLen = 0;
      CrTrtwT = 4;
      SDRAMMr0 = 2;
    }
    else
    {
      CsBstLen = 1;
      CrTrtwT = 6;
      SDRAMMr0 = 3;
    }

    CasRd = Mode0Cas;
    AddLat = Mode1AllLat;
    CasWr = CasRd + AddLat - 1;
    SDRAMEmr2 = 0;
    SDRAMMr0 = ( ( ( SDRAMWr % 6 ) - 1 ) << ( 8 + 1 ) ) | ( 0 << 8 ) | ( Mode0Cas << 4 ) | ( BstType << 3 ) | SDRAMMr0;
  }

  if ( DeviceType == 3 )
  {
    DdrType = 3; // Case DDR3

    if ( BstLen == 0 )
    {
      CsBstLen = 0; //bst_4
      SDRAMMr0 = 2;
    }
    else
    {
      CsBstLen = 1; // bst_8
      SDRAMMr0 = 0;
    }

    CrlSrt = ( Mode0Cas >> 1 );

    if ( ( ( Mode0Cas ) & 0x1 ) )
    {
      CasRdT = CrlSrt + 12;
    }
    else
    {
      CasRdT = CrlSrt + 4;
    }

    AddLat = 0;

    if ( Mode1AllLat == 1 )
      // CL-1
    {
      AddLat = CasRd - 1;
    }

    if ( Mode1AllLat == 2 )
      // CL-2
    {
      AddLat = CasRd - 2;
    }

    CasRd = CasRdT + AddLat;
    CasWr = Mode2Cwl + 5 + AddLat;
    SDRAMEmr2 = Mode2Cwl << 3;
    SDRAMWr = ( SDRAMWr + 1 ) / 2;

    if ( SDRAMWr == 16 )
    {
      SDRAMWr = 0;
    }

    if ( SDRAMWr <= 9 )
      // 5< wr <= 9
    {
      SDRAMWr = SDRAMWr - 4;
    }

    SDRAMMr0 = ( SDRAMWr << ( 8 + 1 ) ) | ( 0 << 8 ) | ( ( Mode0Cas >> 1 ) << 4 ) | ( BstType << 3 ) | ( ( Mode0Cas & 0x1 ) << 2 ) | SDRAMMr0;
    CrTrtwT = ( CasRdT + 6 ) - CasWr;
  } // if ( DeviceType == 3 )

  if ( DeviceType == 8 )
  {
    DdrType = 8;

    if ( BstLen == 0 )
    {
      SDRAMMr0 = 2; // bst_4
      CsBstLen = 0; //bst_4
      CasRd = 0x2;
    }
    else
    {
      SDRAMMr0 = 3; // bst_8
      CsBstLen = 1; // bst_8
      CasRd = 0x3;
    }

    CasWr = 0;
    SDRAMMr0 = ( CasRd << 4 ) | ( BstType << 3 ) | SDRAMMr0;
    CrTrtwT = 0; // tic: CasRd + rd_rtw + rd_pipe
  } // if ( DeviceType == 8 )

  // countting tRTW
  if ( ( CrTrtwT & 0x1 ) )
  {
    CrTrtw = ( CrTrtwT + 1 ) / ( DfiRate );
  }
  else
  {
    CrTrtw = CrTrtwT / ( DfiRate );
  }

  DqWidth = DqWidth;
  Page = Page + 1; // DQ16 -> memory:byte_unit *2

  // paralle dq_16 => Page + 1
  if ( DqWidth == 1 )
  {
    Page = Page + 1;
  }
}

configSdramParameterFixed()
{
  __message "------------------------------ Config SDRAM Parameter Fixed ---------------";
  __var tmp;

  // SDRAM Attribute
  __writeMemory32( 0x1, 0x40005224, "Memory" );
  __delay( 10 );
  __writeMemory32( 0x2c8, 0x40005004, "Memory" );
  __delay( 10 );
  __writeMemory32( 0xffffd000, 0x40005008, "Memory" );
  __delay( 10 );
  __delay( 3 );
  __writeMemory32( 0x22, 0x40005020, "Memory" );
  __delay( 10 );
  __delay( 3 );
  __writeMemory32( 0x09032001, 0x40005010, "Memory" );
  __delay( 10 );
  __delay( 3 );
  __writeMemory32( 0x2611, 0x40005014, "Memory" );
  __delay( 10 );
  __delay( 3 );
  __writeMemory32( 0x68413, 0x40005018, "Memory" );
  __delay( 10 );
  __delay( 3 );
  __writeMemory32( 0x42, 0x4000501c, "Memory" );
  __delay( 10 );
  __delay( 3 );

  // Enable
  __writeMemory32( 0x700, 0x4000500c, "Memory" );
  __delay( 10 );
  __delay( 20 );
  __writeMemory32( 0x1, 0x40005000, "Memory" );
  __delay( 10 );
  __delay( 100 );

  tmp = __readMemory32( 0x40005000, "Memory" );
  __delay( 10 );

  __writeMemory32( 0x600, 0x4000500c, "Memory" );
  __delay( 10 );
  __delay( 30 );
}

setupSdramController()
{
  __message "------------------------------ Setup SDRAM Controller ---------------------";
  __var tmp;

  // Init SDRAM Controller

  // REG_SDR_MISC : 0x001
  tmp = ( Page << 0 ) | ( Bank << 4 ) | ( CsBstLen << 6 ) | ( DqWidth << 8 );
  __writeMemory32( tmp, 0x40005224, "Memory" );
  __delay( 10 );

  // REG_SDR_DCR : 0x2c8
  tmp = ( 0x2 << 8 ) | ( DqWidth << 4 ) | ( DdrType << 0 );
  __writeMemory32( tmp, 0x40005004, "Memory" );
  __delay( 10 );

  // REG_SDR_IOCR : 0xffffd000
  tmp = ( ( CasRd - 4 ) / ( DfiRate ) << 20 ) //
        | ( 0 << 17 ) | ( ( ( CasWr - 3 ) / ( DfiRate ) ) << 12 ) | ( 0 << 8 );
  __writeMemory32( tmp, 0x40005008, "Memory" );
  __delay( 10 );

  if ( DeviceType != 8 )
  {
    tmp = SDRAMEmr2;
    __writeMemory32( tmp, 0x40005028, "Memory" );
    __delay( 10 );
    tmp = ( 1 << 2 ) | ( 1 << 1 ) | ( Mode1DllEnN );
    __writeMemory32( tmp, 0x40005024, "Memory" );
    __delay( 10 );
  }

  tmp = SDRAMMr0; // 0x22
  __writeMemory32( tmp, 0x40005020, "Memory" );
  __delay( 10 );

  tmp = ( 0 << 28 ) | ( 9 << 24 ) | ( ( ( ( TrefiPs ) / SDRAMPeriod ) + 1 ) << 8 ) //
        | ( ( ( ( TrfcPs ) / SDRAMPeriod ) + 1 ) << 0 );
  __writeMemory32( tmp, 0x40005010, "Memory" ); // 0x09032001
  __delay( 10 );

  tmp = ( ( ( ( TrtpTck ) / DfiRate ) + 1 ) << 13 ) | ( CrTwr << 9 ) | //
        ( ( ( ( TrasPs ) / SDRAMPeriod ) + 1 ) << 4 ) | ( ( ( ( TrpPs ) / SDRAMPeriod ) + 1 ) << 0 );
  __writeMemory32( tmp, 0x40005014, "Memory" ); // 0x2611
  __delay( 10 );

  tmp = ( CrTrtw << 20 ) | ( ( ( ( TwtrTck ) / DfiRate ) + 3 ) << 17 ) | //
        ( ( ( ( TccdTck ) / DfiRate ) + 1 ) << 14 ) | ( ( ( ( TrcdPs ) / SDRAMPeriod ) + 1 ) << 10 ) | //
        ( ( ( ( TrcPs ) / SDRAMPeriod ) + 1 ) << 4 ) | ( ( ( TrrdTck / DfiRate ) + 1 ) << 0 );
  __writeMemory32( tmp, 0x40005018, "Memory" ); // 0x68413
  __delay( 10 );

  tmp = ( TmrdTck << 5 ) | ( 0 << 4 ) | ( 2 << 0 ); // 0x42
  __writeMemory32( tmp, 0x4000501c, "Memory" );
  __delay( 10 );

  // Set Idle
  __writeMemory32( 0x700, 0x4000500c, "Memory" );
  __delay( 10 );

  // start init
  __writeMemory32( 0x1, 0x40005000, "Memory" );
  __delay( 100 );
  tmp = __readMemory32( 0x40005000, "Memory" );
  __delay( 10 );

  // enter memory mode
  __writeMemory32( 0x600, 0x4000500c, "Memory" );
  __delay( 10 );
}

calibrationSdram()
{
  __message "------------------------------ Calibration SDRAM Start --------------------";

  __var i;
  __var tmp;
  __var vaddr;
  __var testSdram;

  ok_cnt = 0;
  ok_pipe_id0 = 15;
  ok_tpc_min0 = 12;
  ok_tpc_max0 = 0;

  rdp_reg = __readMemory32( 0x40005008, "Memory" ) & 0xFFFF00FF;
  tpc_reg = __readMemory32( 0x40000300, "Memory" ) & 0xFF00FFFF;

  for ( rdp = 0; ( rdp <= 7 ) && ( err_cnt == 0 || ok_cnt == 0 ); rdp++ )
  {
    err_cnt = 0;
    // try pipe
    __writeMemory32( rdp_reg | rdp << 8, 0x40005008, "Memory" );
    __delay( 10 );

    for ( tpc = 0; ( tpc <= 12 ) && ( err_cnt < 2 ); tpc++ )
    {
      // try tpc
      __writeMemory32( tpc_reg | tpc << 16, 0x40000300, "Memory" );
      __delay( 10 );

      // Test SDRAM
      testSdram = 0;
      for ( i = 0; i < 10; i++ )
      {
        vaddr = 0x30000000 + ( ( i * 23 ) & 0x1FFFFC );
        __writeMemory32( 0x55AA55AA, vaddr, "Memory" );
        tmp = __readMemory32( vaddr, "Memory" );

        if ( tmp != 0x55AA55AA )
        {
          testSdram = 1;
          i = 10; // can not use break here!
        }
      }

      if ( testSdram == 0 ) // Test Passed
      {
        if ( ok_pipe_id0 == 15 )
        {
          ok_pipe_id0 = rdp;
          ok_cnt++;
        }

        if ( ok_tpc_min0 > tpc )
        {
          ok_tpc_min0 = tpc;
        }

        if ( ok_tpc_max0 < tpc )
        {
          ok_tpc_max0 = tpc;
        }
      }
      else // Test Failed
      {
        err_cnt++;
      }
    }

    if ( ok_pipe_id0 != 15 )
    {
      ok_pipe_id1 = ok_pipe_id0;
      ok_tpc_min1 = ok_tpc_min0;
      ok_tpc_max1 = ok_tpc_max0;
      ok_pipe_id0 = 15;
      ok_tpc_min0 = 12;
      ok_tpc_max0 = 0;
    }

  } // for ( rdp = 0; ( rdp <= 7 ) && ( err_cnt == 0 || ok_cnt == 0 ); rdp++ )

  tpc0_cnt = ok_tpc_max0 - ok_tpc_min0;

  if ( tpc0_cnt < 0 )
  {
    tpc0_cnt = 0;
  }

  tpc1_cnt = ok_tpc_max1 - ok_tpc_min1;

  if ( tpc1_cnt < 0 )
  {
    tpc1_cnt = 0;
  }
}

calibrationSdramDone()
{
  __message "------------------------------ Calibration SDRAM Done ---------------------";

  rdp_reg = __readMemory32( 0x40005008, "Memory" ) & 0xFFFF00FF;
  tpc_reg = __readMemory32( 0x40000300, "Memory" ) & 0xFF00FFFF;

  if ( tpc1_cnt > tpc0_cnt )
  {
    __writeMemory32( rdp_reg | ok_pipe_id1 << 8, 0x40005008, "Memory" );
    __delay( 10 );
    __writeMemory32( tpc_reg | ( tpc1_cnt / 2 ) << 16, 0x40000300, "Memory" );
    __delay( 10 );
  }
  else
  {
    __writeMemory32( rdp_reg | ok_pipe_id0 << 8, 0x40005008, "Memory" );
    __delay( 10 );
    __writeMemory32( tpc_reg | ( tpc0_cnt / 2 ) << 16, 0x40000300, "Memory" );
    __delay( 10 );
  }

  __var tmp;

  tmp = __readMemory32( 0x30000000, "Memory" );
  tmp ^= 0xFFFFFFFF;
  __writeMemory32( tmp, 0x30000000, "Memory" );
  __delay( 10 );
  tmp = __readMemory32( 0x30000000, "Memory" );
  __delay( 10 );
}

setupSdram()
{
  __message "---------------------------- >>>>>> SDRAM Setup ---------------------------";
  loadSdramParameter();
  configSdramParameter();
  setupSdramController();
  calibrationSdram();
  calibrationSdramDone();
  __message "---------------------------- <<<<<< SDRAM Setup ---------------------------";
}

