#ifndef __RTL8195AM_I2C_H__
#define __RTL8195AM_I2C_H__

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */

#include "rtl8195am.h"
#include "rtl8195am_conf.h"
#include "rtl8195am_types.h"
#include "rtl8195am_macro.h"
#include "rtl8195am_compiler.h"

//================ Register Bit Field ==================
//2 REG_DW_I2C_IC_CON
#define BIT_IC_CON_IC_SLAVE_DISABLE           	BIT(6)
#define BIT_SHIFT_IC_CON_IC_SLAVE_DISABLE     	6
#define BIT_MASK_IC_CON_IC_SLAVE_DISABLE      	0x1
#define BIT_CTRL_IC_CON_IC_SLAVE_DISABLE(x)   	(((x) & BIT_MASK_IC_CON_IC_SLAVE_DISABLE) << BIT_SHIFT_IC_CON_IC_SLAVE_DISABLE)

#define BIT_IC_CON_IC_RESTART_EN              	BIT(5)
#define BIT_SHIFT_IC_CON_IC_RESTART_EN        	5
#define BIT_MASK_IC_CON_IC_RESTART_EN         	0x1
#define BIT_CTRL_IC_CON_IC_RESTART_EN(x)      	(((x) & BIT_MASK_IC_CON_IC_RESTART_EN) << BIT_SHIFT_IC_CON_IC_RESTART_EN)

#define BIT_IC_CON_IC_10BITADDR_MASTER        	BIT(4)
#define BIT_SHIFT_IC_CON_IC_10BITADDR_MASTER  	4
#define BIT_MASK_IC_CON_IC_10BITADDR_MASTER   	0x1
#define BIT_CTRL_IC_CON_IC_10BITADDR_MASTER(x)	(((x) & BIT_MASK_IC_CON_IC_10BITADDR_MASTER) << BIT_SHIFT_IC_CON_IC_10BITADDR_MASTER)

#define BIT_IC_CON_IC_10BITADDR_SLAVE         	BIT(3)
#define BIT_SHIFT_IC_CON_IC_10BITADDR_SLAVE   	3
#define BIT_MASK_IC_CON_IC_10BITADDR_SLAVE    	0x1
#define BIT_CTRL_IC_CON_IC_10BITADDR_SLAVE(x) 	(((x) & BIT_MASK_IC_CON_IC_10BITADDR_SLAVE) << BIT_SHIFT_IC_CON_IC_10BITADDR_SLAVE)

#define BIT_SHIFT_IC_CON_SPEED 1
#define BIT_MASK_IC_CON_SPEED 0x3
#define BIT_IC_CON_SPEED(x)                   	(((x) & BIT_MASK_IC_CON_SPEED) << BIT_SHIFT_IC_CON_SPEED)
#define BIT_CTRL_IC_CON_SPEED(x)              	(((x) & BIT_MASK_IC_CON_SPEED) << BIT_SHIFT_IC_CON_SPEED)
#define BIT_GET_IC_CON_SPEED(x)               	(((x) >> BIT_SHIFT_IC_CON_SPEED) & BIT_MASK_IC_CON_SPEED)

#define BIT_IC_CON_MASTER_MODE                	BIT(0)
#define BIT_SHIFT_IC_CON_MASTER_MODE          	0
#define BIT_MASK_IC_CON_MASTER_MODE           	0x1
#define BIT_CTRL_IC_CON_MASTER_MODE(x)        	(((x) & BIT_MASK_IC_CON_MASTER_MODE) << BIT_SHIFT_IC_CON_MASTER_MODE)

//2 REG_DW_I2C_IC_TAR
#define BIT_IC_TAR_IC_10BITADDR_MASTER        	BIT(12)
#define BIT_SHIFT_IC_TAR_IC_10BITADDR_MASTER  	12
#define BIT_MASK_IC_TAR_IC_10BITADDR_MASTER   	0x1
#define BIT_CTRL_IC_TAR_IC_10BITADDR_MASTER(x)	(((x) & BIT_MASK_IC_TAR_IC_10BITADDR_MASTER) << BIT_SHIFT_IC_TAR_IC_10BITADDR_MASTER)

#define BIT_IC_TAR_SPECIAL                    	BIT(11)
#define BIT_SHIFT_IC_TAR_SPECIAL              	11
#define BIT_MASK_IC_TAR_SPECIAL               	0x1
#define BIT_CTRL_IC_TAR_SPECIAL(x)            	(((x) & BIT_MASK_IC_TAR_SPECIAL) << BIT_SHIFT_IC_TAR_SPECIAL)

#define BIT_IC_TAR_GC_OR_START                	BIT(10)
#define BIT_SHIFT_IC_TAR_GC_OR_START          	10
#define BIT_MASK_IC_TAR_GC_OR_START           	0x1
#define BIT_CTRL_IC_TAR_GC_OR_START(x)        	(((x) & BIT_MASK_IC_TAR_GC_OR_START) << BIT_SHIFT_IC_TAR_GC_OR_START)

#define BIT_SHIFT_IC_TAR 0
#define BIT_MASK_IC_TAR 0x3ff
#define BIT_IC_TAR(x)                         	(((x) & BIT_MASK_IC_TAR) << BIT_SHIFT_IC_TAR)
#define BIT_CTRL_IC_TAR(x)                    	(((x) & BIT_MASK_IC_TAR) << BIT_SHIFT_IC_TAR)
#define BIT_GET_IC_TAR(x)                     	(((x) >> BIT_SHIFT_IC_TAR) & BIT_MASK_IC_TAR)

//2 REG_DW_I2C_IC_SAR

#define BIT_SHIFT_IC_SAR 0
#define BIT_MASK_IC_SAR 0x3ff
#define BIT_IC_SAR(x)                         	(((x) & BIT_MASK_IC_SAR) << BIT_SHIFT_IC_SAR)
#define BIT_CTRL_IC_SAR(x)                    	(((x) & BIT_MASK_IC_SAR) << BIT_SHIFT_IC_SAR)
#define BIT_GET_IC_SAR(x)                     	(((x) >> BIT_SHIFT_IC_SAR) & BIT_MASK_IC_SAR)

//2 REG_DW_I2C_IC_HS_MADDR

#define BIT_SHIFT_IC_HS_MADDR 0
#define BIT_MASK_IC_HS_MADDR 0x7
#define BIT_IC_HS_MADDR(x)                    	(((x) & BIT_MASK_IC_HS_MADDR) << BIT_SHIFT_IC_HS_MADDR)
#define BIT_CTRL_IC_HS_MADDR(x)               	(((x) & BIT_MASK_IC_HS_MADDR) << BIT_SHIFT_IC_HS_MADDR)
#define BIT_GET_IC_HS_MADDR(x)                	(((x) >> BIT_SHIFT_IC_HS_MADDR) & BIT_MASK_IC_HS_MADDR)

//2 REG_DW_I2C_IC_DATA_CMD
#define BIT_IC_DATA_CMD_RESTART               	BIT(10)
#define BIT_SHIFT_IC_DATA_CMD_RESTART         	10
#define BIT_MASK_IC_DATA_CMD_RESTART          	0x1
#define BIT_CTRL_IC_DATA_CMD_RESTART(x)       	(((x) & BIT_MASK_IC_DATA_CMD_RESTART) << BIT_SHIFT_IC_DATA_CMD_RESTART)

#define BIT_IC_DATA_CMD_STOP                  	BIT(9)
#define BIT_SHIFT_IC_DATA_CMD_STOP            	9
#define BIT_MASK_IC_DATA_CMD_STOP             	0x1
#define BIT_CTRL_IC_DATA_CMD_STOP(x)          	(((x) & BIT_MASK_IC_DATA_CMD_STOP) << BIT_SHIFT_IC_DATA_CMD_STOP)

#define BIT_IC_DATA_CMD_CMD                   	BIT(8)
#define BIT_SHIFT_IC_DATA_CMD_CMD             	8
#define BIT_MASK_IC_DATA_CMD_CMD              	0x1
#define BIT_CTRL_IC_DATA_CMD_CMD(x)           	(((x) & BIT_MASK_IC_DATA_CMD_CMD) << BIT_SHIFT_IC_DATA_CMD_CMD)

#define BIT_SHIFT_IC_DATA_CMD_DAT 0
#define BIT_MASK_IC_DATA_CMD_DAT 0xff
#define BIT_IC_DATA_CMD_DAT(x)                	(((x) & BIT_MASK_IC_DATA_CMD_DAT) << BIT_SHIFT_IC_DATA_CMD_DAT)
#define BIT_CTRL_IC_DATA_CMD_DAT(x)           	(((x) & BIT_MASK_IC_DATA_CMD_DAT) << BIT_SHIFT_IC_DATA_CMD_DAT)
#define BIT_GET_IC_DATA_CMD_DAT(x)            	(((x) >> BIT_SHIFT_IC_DATA_CMD_DAT) & BIT_MASK_IC_DATA_CMD_DAT)

//2 REG_DW_I2C_IC_SS_SCL_HCNT

#define BIT_SHIFT_IC_SS_SCL_HCNT 0
#define BIT_MASK_IC_SS_SCL_HCNT 0xffff
#define BIT_IC_SS_SCL_HCNT(x)                 	(((x) & BIT_MASK_IC_SS_SCL_HCNT) << BIT_SHIFT_IC_SS_SCL_HCNT)
#define BIT_CTRL_IC_SS_SCL_HCNT(x)            	(((x) & BIT_MASK_IC_SS_SCL_HCNT) << BIT_SHIFT_IC_SS_SCL_HCNT)
#define BIT_GET_IC_SS_SCL_HCNT(x)             	(((x) >> BIT_SHIFT_IC_SS_SCL_HCNT) & BIT_MASK_IC_SS_SCL_HCNT)

//2 REG_DW_I2C_IC_SS_SCL_LCNT

#define BIT_SHIFT_IC_SS_SCL_LCNT 0
#define BIT_MASK_IC_SS_SCL_LCNT 0xffff
#define BIT_IC_SS_SCL_LCNT(x)                 	(((x) & BIT_MASK_IC_SS_SCL_LCNT) << BIT_SHIFT_IC_SS_SCL_LCNT)
#define BIT_CTRL_IC_SS_SCL_LCNT(x)            	(((x) & BIT_MASK_IC_SS_SCL_LCNT) << BIT_SHIFT_IC_SS_SCL_LCNT)
#define BIT_GET_IC_SS_SCL_LCNT(x)             	(((x) >> BIT_SHIFT_IC_SS_SCL_LCNT) & BIT_MASK_IC_SS_SCL_LCNT)

//2 REG_DW_I2C_IC_FS_SCL_HCNT

#define BIT_SHIFT_IC_FS_SCL_HCNT 0
#define BIT_MASK_IC_FS_SCL_HCNT 0xffff
#define BIT_IC_FS_SCL_HCNT(x)                 	(((x) & BIT_MASK_IC_FS_SCL_HCNT) << BIT_SHIFT_IC_FS_SCL_HCNT)
#define BIT_CTRL_IC_FS_SCL_HCNT(x)            	(((x) & BIT_MASK_IC_FS_SCL_HCNT) << BIT_SHIFT_IC_FS_SCL_HCNT)
#define BIT_GET_IC_FS_SCL_HCNT(x)             	(((x) >> BIT_SHIFT_IC_FS_SCL_HCNT) & BIT_MASK_IC_FS_SCL_HCNT)

//2 REG_DW_I2C_IC_FS_SCL_LCNT

#define BIT_SHIFT_IC_FS_SCL_LCNT 0
#define BIT_MASK_IC_FS_SCL_LCNT 0xffff
#define BIT_IC_FS_SCL_LCNT(x)                 	(((x) & BIT_MASK_IC_FS_SCL_LCNT) << BIT_SHIFT_IC_FS_SCL_LCNT)
#define BIT_CTRL_IC_FS_SCL_LCNT(x)            	(((x) & BIT_MASK_IC_FS_SCL_LCNT) << BIT_SHIFT_IC_FS_SCL_LCNT)
#define BIT_GET_IC_FS_SCL_LCNT(x)             	(((x) >> BIT_SHIFT_IC_FS_SCL_LCNT) & BIT_MASK_IC_FS_SCL_LCNT)

//2 REG_DW_I2C_IC_HS_SCL_HCNT

#define BIT_SHIFT_IC_HS_SCL_HCNT 0
#define BIT_MASK_IC_HS_SCL_HCNT 0xffff
#define BIT_IC_HS_SCL_HCNT(x)                 	(((x) & BIT_MASK_IC_HS_SCL_HCNT) << BIT_SHIFT_IC_HS_SCL_HCNT)
#define BIT_CTRL_IC_HS_SCL_HCNT(x)            	(((x) & BIT_MASK_IC_HS_SCL_HCNT) << BIT_SHIFT_IC_HS_SCL_HCNT)
#define BIT_GET_IC_HS_SCL_HCNT(x)             	(((x) >> BIT_SHIFT_IC_HS_SCL_HCNT) & BIT_MASK_IC_HS_SCL_HCNT)

//2 REG_DW_I2C_IC_HS_SCL_LCNT

#define BIT_SHIFT_IC_HS_SCL_LCNT 0
#define BIT_MASK_IC_HS_SCL_LCNT 0xffff
#define BIT_IC_HS_SCL_LCNT(x)                 	(((x) & BIT_MASK_IC_HS_SCL_LCNT) << BIT_SHIFT_IC_HS_SCL_LCNT)
#define BIT_CTRL_IC_HS_SCL_LCNT(x)            	(((x) & BIT_MASK_IC_HS_SCL_LCNT) << BIT_SHIFT_IC_HS_SCL_LCNT)
#define BIT_GET_IC_HS_SCL_LCNT(x)             	(((x) >> BIT_SHIFT_IC_HS_SCL_LCNT) & BIT_MASK_IC_HS_SCL_LCNT)

//2 REG_DW_I2C_IC_INTR_STAT
#define BIT_IC_INTR_STAT_R_GEN_CALL           	BIT(11)
#define BIT_SHIFT_IC_INTR_STAT_R_GEN_CALL     	11
#define BIT_MASK_IC_INTR_STAT_R_GEN_CALL      	0x1
#define BIT_CTRL_IC_INTR_STAT_R_GEN_CALL(x)   	(((x) & BIT_MASK_IC_INTR_STAT_R_GEN_CALL) << BIT_SHIFT_IC_INTR_STAT_R_GEN_CALL)

#define BIT_IC_INTR_STAT_R_START_DET          	BIT(10)
#define BIT_SHIFT_IC_INTR_STAT_R_START_DET    	10
#define BIT_MASK_IC_INTR_STAT_R_START_DET     	0x1
#define BIT_CTRL_IC_INTR_STAT_R_START_DET(x)  	(((x) & BIT_MASK_IC_INTR_STAT_R_START_DET) << BIT_SHIFT_IC_INTR_STAT_R_START_DET)

#define BIT_IC_INTR_STAT_R_STOP_DET           	BIT(9)
#define BIT_SHIFT_IC_INTR_STAT_R_STOP_DET     	9
#define BIT_MASK_IC_INTR_STAT_R_STOP_DET      	0x1
#define BIT_CTRL_IC_INTR_STAT_R_STOP_DET(x)   	(((x) & BIT_MASK_IC_INTR_STAT_R_STOP_DET) << BIT_SHIFT_IC_INTR_STAT_R_STOP_DET)

#define BIT_IC_INTR_STAT_R_ACTIVITY           	BIT(8)
#define BIT_SHIFT_IC_INTR_STAT_R_ACTIVITY     	8
#define BIT_MASK_IC_INTR_STAT_R_ACTIVITY      	0x1
#define BIT_CTRL_IC_INTR_STAT_R_ACTIVITY(x)   	(((x) & BIT_MASK_IC_INTR_STAT_R_ACTIVITY) << BIT_SHIFT_IC_INTR_STAT_R_ACTIVITY)

#define BIT_IC_INTR_STAT_R_RX_DONE            	BIT(7)
#define BIT_SHIFT_IC_INTR_STAT_R_RX_DONE      	7
#define BIT_MASK_IC_INTR_STAT_R_RX_DONE       	0x1
#define BIT_CTRL_IC_INTR_STAT_R_RX_DONE(x)    	(((x) & BIT_MASK_IC_INTR_STAT_R_RX_DONE) << BIT_SHIFT_IC_INTR_STAT_R_RX_DONE)

#define BIT_IC_INTR_STAT_R_TX_ABRT            	BIT(6)
#define BIT_SHIFT_IC_INTR_STAT_R_TX_ABRT      	6
#define BIT_MASK_IC_INTR_STAT_R_TX_ABRT       	0x1
#define BIT_CTRL_IC_INTR_STAT_R_TX_ABRT(x)    	(((x) & BIT_MASK_IC_INTR_STAT_R_TX_ABRT) << BIT_SHIFT_IC_INTR_STAT_R_TX_ABRT)

#define BIT_IC_INTR_STAT_R_RD_REQ             	BIT(5)
#define BIT_SHIFT_IC_INTR_STAT_R_RD_REQ       	5
#define BIT_MASK_IC_INTR_STAT_R_RD_REQ        	0x1
#define BIT_CTRL_IC_INTR_STAT_R_RD_REQ(x)     	(((x) & BIT_MASK_IC_INTR_STAT_R_RD_REQ) << BIT_SHIFT_IC_INTR_STAT_R_RD_REQ)

#define BIT_IC_INTR_STAT_R_TX_EMPTY           	BIT(4)
#define BIT_SHIFT_IC_INTR_STAT_R_TX_EMPTY     	4
#define BIT_MASK_IC_INTR_STAT_R_TX_EMPTY      	0x1
#define BIT_CTRL_IC_INTR_STAT_R_TX_EMPTY(x)   	(((x) & BIT_MASK_IC_INTR_STAT_R_TX_EMPTY) << BIT_SHIFT_IC_INTR_STAT_R_TX_EMPTY)

#define BIT_IC_INTR_STAT_R_TX_OVER            	BIT(3)
#define BIT_SHIFT_IC_INTR_STAT_R_TX_OVER      	3
#define BIT_MASK_IC_INTR_STAT_R_TX_OVER       	0x1
#define BIT_CTRL_IC_INTR_STAT_R_TX_OVER(x)    	(((x) & BIT_MASK_IC_INTR_STAT_R_TX_OVER) << BIT_SHIFT_IC_INTR_STAT_R_TX_OVER)

#define BIT_IC_INTR_STAT_R_RX_FULL            	BIT(2)
#define BIT_SHIFT_IC_INTR_STAT_R_RX_FULL      	2
#define BIT_MASK_IC_INTR_STAT_R_RX_FULL       	0x1
#define BIT_CTRL_IC_INTR_STAT_R_RX_FULL(x)    	(((x) & BIT_MASK_IC_INTR_STAT_R_RX_FULL) << BIT_SHIFT_IC_INTR_STAT_R_RX_FULL)

#define BIT_IC_INTR_STAT_R_RX_OVER            	BIT(1)
#define BIT_SHIFT_IC_INTR_STAT_R_RX_OVER      	1
#define BIT_MASK_IC_INTR_STAT_R_RX_OVER       	0x1
#define BIT_CTRL_IC_INTR_STAT_R_RX_OVER(x)    	(((x) & BIT_MASK_IC_INTR_STAT_R_RX_OVER) << BIT_SHIFT_IC_INTR_STAT_R_RX_OVER)

#define BIT_IC_INTR_STAT_R_RX_UNDER           	BIT(0)
#define BIT_SHIFT_IC_INTR_STAT_R_RX_UNDER     	0
#define BIT_MASK_IC_INTR_STAT_R_RX_UNDER      	0x1
#define BIT_CTRL_IC_INTR_STAT_R_RX_UNDER(x)   	(((x) & BIT_MASK_IC_INTR_STAT_R_RX_UNDER) << BIT_SHIFT_IC_INTR_STAT_R_RX_UNDER)

//2 REG_DW_I2C_IC_INTR_MASK
#define BIT_IC_INTR_MASK_M_GEN_CALL           	BIT(11)
#define BIT_SHIFT_IC_INTR_MASK_M_GEN_CALL     	11
#define BIT_MASK_IC_INTR_MASK_M_GEN_CALL      	0x1
#define BIT_CTRL_IC_INTR_MASK_M_GEN_CALL(x)   	(((x) & BIT_MASK_IC_INTR_MASK_M_GEN_CALL) << BIT_SHIFT_IC_INTR_MASK_M_GEN_CALL)

#define BIT_IC_INTR_MASK_M_START_DET          	BIT(10)
#define BIT_SHIFT_IC_INTR_MASK_M_START_DET    	10
#define BIT_MASK_IC_INTR_MASK_M_START_DET     	0x1
#define BIT_CTRL_IC_INTR_MASK_M_START_DET(x)  	(((x) & BIT_MASK_IC_INTR_MASK_M_START_DET) << BIT_SHIFT_IC_INTR_MASK_M_START_DET)

#define BIT_IC_INTR_MASK_M_STOP_DET           	BIT(9)
#define BIT_SHIFT_IC_INTR_MASK_M_STOP_DET     	9
#define BIT_MASK_IC_INTR_MASK_M_STOP_DET      	0x1
#define BIT_CTRL_IC_INTR_MASK_M_STOP_DET(x)   	(((x) & BIT_MASK_IC_INTR_MASK_M_STOP_DET) << BIT_SHIFT_IC_INTR_MASK_M_STOP_DET)

#define BIT_IC_INTR_MASK_M_ACTIVITY           	BIT(8)
#define BIT_SHIFT_IC_INTR_MASK_M_ACTIVITY     	8
#define BIT_MASK_IC_INTR_MASK_M_ACTIVITY      	0x1
#define BIT_CTRL_IC_INTR_MASK_M_ACTIVITY(x)   	(((x) & BIT_MASK_IC_INTR_MASK_M_ACTIVITY) << BIT_SHIFT_IC_INTR_MASK_M_ACTIVITY)

#define BIT_IC_INTR_MASK_M_RX_DONE            	BIT(7)
#define BIT_SHIFT_IC_INTR_MASK_M_RX_DONE      	7
#define BIT_MASK_IC_INTR_MASK_M_RX_DONE       	0x1
#define BIT_CTRL_IC_INTR_MASK_M_RX_DONE(x)    	(((x) & BIT_MASK_IC_INTR_MASK_M_RX_DONE) << BIT_SHIFT_IC_INTR_MASK_M_RX_DONE)

#define BIT_IC_INTR_MASK_M_TX_ABRT            	BIT(6)
#define BIT_SHIFT_IC_INTR_MASK_M_TX_ABRT      	6
#define BIT_MASK_IC_INTR_MASK_M_TX_ABRT       	0x1
#define BIT_CTRL_IC_INTR_MASK_M_TX_ABRT(x)    	(((x) & BIT_MASK_IC_INTR_MASK_M_TX_ABRT) << BIT_SHIFT_IC_INTR_MASK_M_TX_ABRT)

#define BIT_IC_INTR_MASK_M_RD_REQ             	BIT(5)
#define BIT_SHIFT_IC_INTR_MASK_M_RD_REQ       	5
#define BIT_MASK_IC_INTR_MASK_M_RD_REQ        	0x1
#define BIT_CTRL_IC_INTR_MASK_M_RD_REQ(x)     	(((x) & BIT_MASK_IC_INTR_MASK_M_RD_REQ) << BIT_SHIFT_IC_INTR_MASK_M_RD_REQ)

#define BIT_IC_INTR_MASK_M_TX_EMPTY           	BIT(4)
#define BIT_SHIFT_IC_INTR_MASK_M_TX_EMPTY     	4
#define BIT_MASK_IC_INTR_MASK_M_TX_EMPTY      	0x1
#define BIT_CTRL_IC_INTR_MASK_M_TX_EMPTY(x)   	(((x) & BIT_MASK_IC_INTR_MASK_M_TX_EMPTY) << BIT_SHIFT_IC_INTR_MASK_M_TX_EMPTY)

#define BIT_IC_INTR_MASK_M_TX_OVER            	BIT(3)
#define BIT_SHIFT_IC_INTR_MASK_M_TX_OVER      	3
#define BIT_MASK_IC_INTR_MASK_M_TX_OVER       	0x1
#define BIT_CTRL_IC_INTR_MASK_M_TX_OVER(x)    	(((x) & BIT_MASK_IC_INTR_MASK_M_TX_OVER) << BIT_SHIFT_IC_INTR_MASK_M_TX_OVER)

#define BIT_IC_INTR_MASK_M_RX_FULL            	BIT(2)
#define BIT_SHIFT_IC_INTR_MASK_M_RX_FULL      	2
#define BIT_MASK_IC_INTR_MASK_M_RX_FULL       	0x1
#define BIT_CTRL_IC_INTR_MASK_M_RX_FULL(x)    	(((x) & BIT_MASK_IC_INTR_MASK_M_RX_FULL) << BIT_SHIFT_IC_INTR_MASK_M_RX_FULL)

#define BIT_IC_INTR_MASK_M_RX_OVER            	BIT(1)
#define BIT_SHIFT_IC_INTR_MASK_M_RX_OVER      	1
#define BIT_MASK_IC_INTR_MASK_M_RX_OVER       	0x1
#define BIT_CTRL_IC_INTR_MASK_M_RX_OVER(x)    	(((x) & BIT_MASK_IC_INTR_MASK_M_RX_OVER) << BIT_SHIFT_IC_INTR_MASK_M_RX_OVER)

#define BIT_IC_INTR_MASK_M_RX_UNDER           	BIT(0)
#define BIT_SHIFT_IC_INTR_MASK_M_RX_UNDER     	0
#define BIT_MASK_IC_INTR_MASK_M_RX_UNDER      	0x1
#define BIT_CTRL_IC_INTR_MASK_M_RX_UNDER(x)   	(((x) & BIT_MASK_IC_INTR_MASK_M_RX_UNDER) << BIT_SHIFT_IC_INTR_MASK_M_RX_UNDER)

//2 REG_DW_I2C_IC_RAW_INTR_STAT
#define BIT_IC_RAW_INTR_STAT_GEN_CALL         	BIT(11)
#define BIT_SHIFT_IC_RAW_INTR_STAT_GEN_CALL   	11
#define BIT_MASK_IC_RAW_INTR_STAT_GEN_CALL    	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_GEN_CALL(x) 	(((x) & BIT_MASK_IC_RAW_INTR_STAT_GEN_CALL) << BIT_SHIFT_IC_RAW_INTR_STAT_GEN_CALL)

#define BIT_IC_RAW_INTR_STAT_START_DET        	BIT(10)
#define BIT_SHIFT_IC_RAW_INTR_STAT_START_DET  	10
#define BIT_MASK_IC_RAW_INTR_STAT_START_DET   	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_START_DET(x)	(((x) & BIT_MASK_IC_RAW_INTR_STAT_START_DET) << BIT_SHIFT_IC_RAW_INTR_STAT_START_DET)

#define BIT_IC_RAW_INTR_STAT_STOP_DET         	BIT(9)
#define BIT_SHIFT_IC_RAW_INTR_STAT_STOP_DET   	9
#define BIT_MASK_IC_RAW_INTR_STAT_STOP_DET    	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_STOP_DET(x) 	(((x) & BIT_MASK_IC_RAW_INTR_STAT_STOP_DET) << BIT_SHIFT_IC_RAW_INTR_STAT_STOP_DET)

#define BIT_IC_RAW_INTR_STAT_ACTIVITY         	BIT(8)
#define BIT_SHIFT_IC_RAW_INTR_STAT_ACTIVITY   	8
#define BIT_MASK_IC_RAW_INTR_STAT_ACTIVITY    	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_ACTIVITY(x) 	(((x) & BIT_MASK_IC_RAW_INTR_STAT_ACTIVITY) << BIT_SHIFT_IC_RAW_INTR_STAT_ACTIVITY)

#define BIT_IC_RAW_INTR_STAT_RX_DONE          	BIT(7)
#define BIT_SHIFT_IC_RAW_INTR_STAT_RX_DONE    	7
#define BIT_MASK_IC_RAW_INTR_STAT_RX_DONE     	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_RX_DONE(x)  	(((x) & BIT_MASK_IC_RAW_INTR_STAT_RX_DONE) << BIT_SHIFT_IC_RAW_INTR_STAT_RX_DONE)

#define BIT_IC_RAW_INTR_STAT_TX_ABRT          	BIT(6)
#define BIT_SHIFT_IC_RAW_INTR_STAT_TX_ABRT    	6
#define BIT_MASK_IC_RAW_INTR_STAT_TX_ABRT     	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_TX_ABRT(x)  	(((x) & BIT_MASK_IC_RAW_INTR_STAT_TX_ABRT) << BIT_SHIFT_IC_RAW_INTR_STAT_TX_ABRT)

#define BIT_IC_RAW_INTR_STAT_RD_REQ           	BIT(5)
#define BIT_SHIFT_IC_RAW_INTR_STAT_RD_REQ     	5
#define BIT_MASK_IC_RAW_INTR_STAT_RD_REQ      	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_RD_REQ(x)   	(((x) & BIT_MASK_IC_RAW_INTR_STAT_RD_REQ) << BIT_SHIFT_IC_RAW_INTR_STAT_RD_REQ)

#define BIT_IC_RAW_INTR_STAT_TX_EMPTY         	BIT(4)
#define BIT_SHIFT_IC_RAW_INTR_STAT_TX_EMPTY   	4
#define BIT_MASK_IC_RAW_INTR_STAT_TX_EMPTY    	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_TX_EMPTY(x) 	(((x) & BIT_MASK_IC_RAW_INTR_STAT_TX_EMPTY) << BIT_SHIFT_IC_RAW_INTR_STAT_TX_EMPTY)

#define BIT_IC_RAW_INTR_STAT_TX_OVER          	BIT(3)
#define BIT_SHIFT_IC_RAW_INTR_STAT_TX_OVER    	3
#define BIT_MASK_IC_RAW_INTR_STAT_TX_OVER     	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_TX_OVER(x)  	(((x) & BIT_MASK_IC_RAW_INTR_STAT_TX_OVER) << BIT_SHIFT_IC_RAW_INTR_STAT_TX_OVER)

#define BIT_IC_RAW_INTR_STAT_RX_FULL          	BIT(2)
#define BIT_SHIFT_IC_RAW_INTR_STAT_RX_FULL    	2
#define BIT_MASK_IC_RAW_INTR_STAT_RX_FULL     	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_RX_FULL(x)  	(((x) & BIT_MASK_IC_RAW_INTR_STAT_RX_FULL) << BIT_SHIFT_IC_RAW_INTR_STAT_RX_FULL)

#define BIT_IC_RAW_INTR_STAT_RX_OVER          	BIT(1)
#define BIT_SHIFT_IC_RAW_INTR_STAT_RX_OVER    	1
#define BIT_MASK_IC_RAW_INTR_STAT_RX_OVER     	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_RX_OVER(x)  	(((x) & BIT_MASK_IC_RAW_INTR_STAT_RX_OVER) << BIT_SHIFT_IC_RAW_INTR_STAT_RX_OVER)

#define BIT_IC_RAW_INTR_STAT_RX_UNDER         	BIT(0)
#define BIT_SHIFT_IC_RAW_INTR_STAT_RX_UNDER   	0
#define BIT_MASK_IC_RAW_INTR_STAT_RX_UNDER    	0x1
#define BIT_CTRL_IC_RAW_INTR_STAT_RX_UNDER(x) 	(((x) & BIT_MASK_IC_RAW_INTR_STAT_RX_UNDER) << BIT_SHIFT_IC_RAW_INTR_STAT_RX_UNDER)

//2 REG_DW_I2C_IC_RX_TL

#define BIT_SHIFT_IC_RX_TL 0
#define BIT_MASK_IC_RX_TL 0xff
#define BIT_IC_RX_TL(x)                       	(((x) & BIT_MASK_IC_RX_TL) << BIT_SHIFT_IC_RX_TL)
#define BIT_CTRL_IC_RX_TL(x)                  	(((x) & BIT_MASK_IC_RX_TL) << BIT_SHIFT_IC_RX_TL)
#define BIT_GET_IC_RX_TL(x)                   	(((x) >> BIT_SHIFT_IC_RX_TL) & BIT_MASK_IC_RX_TL)

//2 REG_DW_I2C_IC_TX_TL

#define BIT_SHIFT_IC_TX_TL 0
#define BIT_MASK_IC_TX_TL 0xff
#define BIT_IC_TX_TL(x)                       	(((x) & BIT_MASK_IC_TX_TL) << BIT_SHIFT_IC_TX_TL)
#define BIT_CTRL_IC_TX_TL(x)                  	(((x) & BIT_MASK_IC_TX_TL) << BIT_SHIFT_IC_TX_TL)
#define BIT_GET_IC_TX_TL(x)                   	(((x) >> BIT_SHIFT_IC_TX_TL) & BIT_MASK_IC_TX_TL)

//2 REG_DW_I2C_IC_CLR_INTR
#define BIT_IC_CLR_INTR                       	BIT(0)
#define BIT_SHIFT_IC_CLR_INTR                 	0
#define BIT_MASK_IC_CLR_INTR                  	0x1
#define BIT_CTRL_IC_CLR_INTR(x)               	(((x) & BIT_MASK_IC_CLR_INTR) << BIT_SHIFT_IC_CLR_INTR)

//2 REG_DW_I2C_IC_CLR_RX_UNDER
#define BIT_IC_CLR_RX_UNDER                   	BIT(0)
#define BIT_SHIFT_IC_CLR_RX_UNDER             	0
#define BIT_MASK_IC_CLR_RX_UNDER              	0x1
#define BIT_CTRL_IC_CLR_RX_UNDER(x)           	(((x) & BIT_MASK_IC_CLR_RX_UNDER) << BIT_SHIFT_IC_CLR_RX_UNDER)

//2 REG_DW_I2C_IC_CLR_RX_OVER
#define BIT_IC_CLR_RX_OVER                    	BIT(0)
#define BIT_SHIFT_IC_CLR_RX_OVER              	0
#define BIT_MASK_IC_CLR_RX_OVER               	0x1
#define BIT_CTRL_IC_CLR_RX_OVER(x)            	(((x) & BIT_MASK_IC_CLR_RX_OVER) << BIT_SHIFT_IC_CLR_RX_OVER)

//2 REG_DW_I2C_IC_CLR_TX_OVER
#define BIT_IC_CLR_TX_OVER                    	BIT(0)
#define BIT_SHIFT_IC_CLR_TX_OVER              	0
#define BIT_MASK_IC_CLR_TX_OVER               	0x1
#define BIT_CTRL_IC_CLR_TX_OVER(x)            	(((x) & BIT_MASK_IC_CLR_TX_OVER) << BIT_SHIFT_IC_CLR_TX_OVER)

//2 REG_DW_I2C_IC_CLR_RD_REQ
#define BIT_IC_CLR_RD_REQ                     	BIT(0)
#define BIT_SHIFT_IC_CLR_RD_REQ               	0
#define BIT_MASK_IC_CLR_RD_REQ                	0x1
#define BIT_CTRL_IC_CLR_RD_REQ(x)             	(((x) & BIT_MASK_IC_CLR_RD_REQ) << BIT_SHIFT_IC_CLR_RD_REQ)

//2 REG_DW_I2C_IC_CLR_TX_ABRT
#define BIT_CLR_RD_REQ                        	BIT(0)
#define BIT_SHIFT_CLR_RD_REQ                  	0
#define BIT_MASK_CLR_RD_REQ                   	0x1
#define BIT_CTRL_CLR_RD_REQ(x)                	(((x) & BIT_MASK_CLR_RD_REQ) << BIT_SHIFT_CLR_RD_REQ)

//2 REG_DW_I2C_IC_CLR_RX_DONE
#define BIT_IC_CLR_RX_DONE                    	BIT(0)
#define BIT_SHIFT_IC_CLR_RX_DONE              	0
#define BIT_MASK_IC_CLR_RX_DONE               	0x1
#define BIT_CTRL_IC_CLR_RX_DONE(x)            	(((x) & BIT_MASK_IC_CLR_RX_DONE) << BIT_SHIFT_IC_CLR_RX_DONE)

//2 REG_DW_I2C_IC_CLR_ACTIVITY
#define BIT_IC_CLR_ACTIVITY                   	BIT(0)
#define BIT_SHIFT_IC_CLR_ACTIVITY             	0
#define BIT_MASK_IC_CLR_ACTIVITY              	0x1
#define BIT_CTRL_IC_CLR_ACTIVITY(x)           	(((x) & BIT_MASK_IC_CLR_ACTIVITY) << BIT_SHIFT_IC_CLR_ACTIVITY)

//2 REG_DW_I2C_IC_CLR_STOP_DET
#define BIT_IC_CLR_STOP_DET                   	BIT(0)
#define BIT_SHIFT_IC_CLR_STOP_DET             	0
#define BIT_MASK_IC_CLR_STOP_DET              	0x1
#define BIT_CTRL_IC_CLR_STOP_DET(x)           	(((x) & BIT_MASK_IC_CLR_STOP_DET) << BIT_SHIFT_IC_CLR_STOP_DET)

//2 REG_DW_I2C_IC_CLR_START_DET
#define BIT_IC_CLR_START_DET                  	BIT(0)
#define BIT_SHIFT_IC_CLR_START_DET            	0
#define BIT_MASK_IC_CLR_START_DET             	0x1
#define BIT_CTRL_IC_CLR_START_DET(x)          	(((x) & BIT_MASK_IC_CLR_START_DET) << BIT_SHIFT_IC_CLR_START_DET)

//2 REG_DW_I2C_IC_CLR_GEN_CALL
#define BIT_IC_CLR_GEN_CALL                   	BIT(0)
#define BIT_SHIFT_IC_CLR_GEN_CALL             	0
#define BIT_MASK_IC_CLR_GEN_CALL              	0x1
#define BIT_CTRL_IC_CLR_GEN_CALL(x)           	(((x) & BIT_MASK_IC_CLR_GEN_CALL) << BIT_SHIFT_IC_CLR_GEN_CALL)

//2 REG_DW_I2C_IC_ENABLE
#define BIT_IC_ENABLE                         	BIT(0)
#define BIT_SHIFT_IC_ENABLE                   	0
#define BIT_MASK_IC_ENABLE                    	0x1
#define BIT_CTRL_IC_ENABLE(x)                 	(((x) & BIT_MASK_IC_ENABLE) << BIT_SHIFT_IC_ENABLE)

//2 REG_DW_I2C_IC_STATUS
#define BIT_IC_STATUS_SLV_ACTIVITY            	BIT(6)
#define BIT_SHIFT_IC_STATUS_SLV_ACTIVITY      	6
#define BIT_MASK_IC_STATUS_SLV_ACTIVITY       	0x1
#define BIT_CTRL_IC_STATUS_SLV_ACTIVITY(x)    	(((x) & BIT_MASK_IC_STATUS_SLV_ACTIVITY) << BIT_SHIFT_IC_STATUS_SLV_ACTIVITY)

#define BIT_IC_STATUS_MST_ACTIVITY            	BIT(5)
#define BIT_SHIFT_IC_STATUS_MST_ACTIVITY      	5
#define BIT_MASK_IC_STATUS_MST_ACTIVITY       	0x1
#define BIT_CTRL_IC_STATUS_MST_ACTIVITY(x)    	(((x) & BIT_MASK_IC_STATUS_MST_ACTIVITY) << BIT_SHIFT_IC_STATUS_MST_ACTIVITY)

#define BIT_IC_STATUS_RFF                     	BIT(4)
#define BIT_SHIFT_IC_STATUS_RFF               	4
#define BIT_MASK_IC_STATUS_RFF                	0x1
#define BIT_CTRL_IC_STATUS_RFF(x)             	(((x) & BIT_MASK_IC_STATUS_RFF) << BIT_SHIFT_IC_STATUS_RFF)

#define BIT_IC_STATUS_RFNE                    	BIT(3)
#define BIT_SHIFT_IC_STATUS_RFNE              	3
#define BIT_MASK_IC_STATUS_RFNE               	0x1
#define BIT_CTRL_IC_STATUS_RFNE(x)            	(((x) & BIT_MASK_IC_STATUS_RFNE) << BIT_SHIFT_IC_STATUS_RFNE)

#define BIT_IC_STATUS_TFE                     	BIT(2)
#define BIT_SHIFT_IC_STATUS_TFE               	2
#define BIT_MASK_IC_STATUS_TFE                	0x1
#define BIT_CTRL_IC_STATUS_TFE(x)             	(((x) & BIT_MASK_IC_STATUS_TFE) << BIT_SHIFT_IC_STATUS_TFE)

#define BIT_IC_STATUS_TFNF                    	BIT(1)
#define BIT_SHIFT_IC_STATUS_TFNF              	1
#define BIT_MASK_IC_STATUS_TFNF               	0x1
#define BIT_CTRL_IC_STATUS_TFNF(x)            	(((x) & BIT_MASK_IC_STATUS_TFNF) << BIT_SHIFT_IC_STATUS_TFNF)

#define BIT_IC_STATUS_ACTIVITY                	BIT(0)
#define BIT_SHIFT_IC_STATUS_ACTIVITY          	0
#define BIT_MASK_IC_STATUS_ACTIVITY           	0x1
#define BIT_CTRL_IC_STATUS_ACTIVITY(x)        	(((x) & BIT_MASK_IC_STATUS_ACTIVITY) << BIT_SHIFT_IC_STATUS_ACTIVITY)

//2 REG_DW_I2C_IC_TXFLR

#define BIT_SHIFT_IC_TXFLR 0
#define BIT_MASK_IC_TXFLR 0x3f
#define BIT_IC_TXFLR(x)                       	(((x) & BIT_MASK_IC_TXFLR) << BIT_SHIFT_IC_TXFLR)
#define BIT_CTRL_IC_TXFLR(x)                  	(((x) & BIT_MASK_IC_TXFLR) << BIT_SHIFT_IC_TXFLR)
#define BIT_GET_IC_TXFLR(x)                   	(((x) >> BIT_SHIFT_IC_TXFLR) & BIT_MASK_IC_TXFLR)

//2 REG_DW_I2C_IC_RXFLR

#define BIT_SHIFT_IC_RXFLR 0
#define BIT_MASK_IC_RXFLR 0x1f
#define BIT_IC_RXFLR(x)                       	(((x) & BIT_MASK_IC_RXFLR) << BIT_SHIFT_IC_RXFLR)
#define BIT_CTRL_IC_RXFLR(x)                  	(((x) & BIT_MASK_IC_RXFLR) << BIT_SHIFT_IC_RXFLR)
#define BIT_GET_IC_RXFLR(x)                   	(((x) >> BIT_SHIFT_IC_RXFLR) & BIT_MASK_IC_RXFLR)

//2 REG_DW_I2C_IC_SDA_HOLD

#define BIT_SHIFT_IC_SDA_HOLD 0
#define BIT_MASK_IC_SDA_HOLD 0xffff
#define BIT_IC_SDA_HOLD(x)                    	(((x) & BIT_MASK_IC_SDA_HOLD) << BIT_SHIFT_IC_SDA_HOLD)
#define BIT_CTRL_IC_SDA_HOLD(x)               	(((x) & BIT_MASK_IC_SDA_HOLD) << BIT_SHIFT_IC_SDA_HOLD)
#define BIT_GET_IC_SDA_HOLD(x)                	(((x) >> BIT_SHIFT_IC_SDA_HOLD) & BIT_MASK_IC_SDA_HOLD)

//2 REG_DW_I2C_IC_TX_ABRT_SOURCE
#define BIT_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX 	BIT(15)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX	15
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST	BIT(14)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST	14
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO	BIT(13)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO	13
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO)

#define BIT_IC_TX_ABRT_SOURCE_ARB_LOST        	BIT(12)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ARB_LOST  	12
#define BIT_MASK_IC_TX_ABRT_SOURCE_ARB_LOST   	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ARB_LOST(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ARB_LOST) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ARB_LOST)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS 	BIT(11)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS	11
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT	BIT(10)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT	10
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT	BIT(9)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT	9
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT 	BIT(8)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT	8
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET	BIT(7)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET	7
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET  	BIT(6)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET	6
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ 	BIT(5)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ	5
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK	BIT(4)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK	4
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK	BIT(3)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK	3
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK	BIT(2)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK	2
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK	BIT(1)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK	1
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK)

#define BIT_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK	BIT(0)
#define BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK	0
#define BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK	0x1
#define BIT_CTRL_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK(x)	(((x) & BIT_MASK_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK) << BIT_SHIFT_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK)

//2 REG_DW_I2C_IC_SLV_DATA_NACK_ONLY
#define BIT_IC_SLV_DATA_NACK_ONLY             	BIT(0)
#define BIT_SHIFT_IC_SLV_DATA_NACK_ONLY       	0
#define BIT_MASK_IC_SLV_DATA_NACK_ONLY        	0x1
#define BIT_CTRL_IC_SLV_DATA_NACK_ONLY(x)     	(((x) & BIT_MASK_IC_SLV_DATA_NACK_ONLY) << BIT_SHIFT_IC_SLV_DATA_NACK_ONLY)

//2 REG_DW_I2C_IC_DMA_CR
#define BIT_IC_DMA_CR_TDMAE                   	BIT(1)
#define BIT_SHIFT_IC_DMA_CR_TDMAE             	1
#define BIT_MASK_IC_DMA_CR_TDMAE              	0x1
#define BIT_CTRL_IC_DMA_CR_TDMAE(x)           	(((x) & BIT_MASK_IC_DMA_CR_TDMAE) << BIT_SHIFT_IC_DMA_CR_TDMAE)

#define BIT_IC_DMA_CR_RDMAE                   	BIT(0)
#define BIT_SHIFT_IC_DMA_CR_RDMAE             	0
#define BIT_MASK_IC_DMA_CR_RDMAE              	0x1
#define BIT_CTRL_IC_DMA_CR_RDMAE(x)           	(((x) & BIT_MASK_IC_DMA_CR_RDMAE) << BIT_SHIFT_IC_DMA_CR_RDMAE)

//2 REG_DW_I2C_IC_DMA_TDLR

#define BIT_SHIFT_IC_DMA_TDLR_DMATDL 0
#define BIT_MASK_IC_DMA_TDLR_DMATDL 0x1f
#define BIT_IC_DMA_TDLR_DMATDL(x)             	(((x) & BIT_MASK_IC_DMA_TDLR_DMATDL) << BIT_SHIFT_IC_DMA_TDLR_DMATDL)
#define BIT_CTRL_IC_DMA_TDLR_DMATDL(x)        	(((x) & BIT_MASK_IC_DMA_TDLR_DMATDL) << BIT_SHIFT_IC_DMA_TDLR_DMATDL)
#define BIT_GET_IC_DMA_TDLR_DMATDL(x)         	(((x) >> BIT_SHIFT_IC_DMA_TDLR_DMATDL) & BIT_MASK_IC_DMA_TDLR_DMATDL)

//2 REG_DW_I2C_IC_DMA_RDLR

#define BIT_SHIFT_IC_DMA_RDLR_DMARDL 0
#define BIT_MASK_IC_DMA_RDLR_DMARDL 0xf
#define BIT_IC_DMA_RDLR_DMARDL(x)             	(((x) & BIT_MASK_IC_DMA_RDLR_DMARDL) << BIT_SHIFT_IC_DMA_RDLR_DMARDL)
#define BIT_CTRL_IC_DMA_RDLR_DMARDL(x)        	(((x) & BIT_MASK_IC_DMA_RDLR_DMARDL) << BIT_SHIFT_IC_DMA_RDLR_DMARDL)
#define BIT_GET_IC_DMA_RDLR_DMARDL(x)         	(((x) >> BIT_SHIFT_IC_DMA_RDLR_DMARDL) & BIT_MASK_IC_DMA_RDLR_DMARDL)

//2 REG_DW_I2C_IC_SDA_SETUP

#define BIT_SHIFT_IC_SDA_SETUP 0
#define BIT_MASK_IC_SDA_SETUP 0xff
#define BIT_IC_SDA_SETUP(x)                   	(((x) & BIT_MASK_IC_SDA_SETUP) << BIT_SHIFT_IC_SDA_SETUP)
#define BIT_CTRL_IC_SDA_SETUP(x)              	(((x) & BIT_MASK_IC_SDA_SETUP) << BIT_SHIFT_IC_SDA_SETUP)
#define BIT_GET_IC_SDA_SETUP(x)               	(((x) >> BIT_SHIFT_IC_SDA_SETUP) & BIT_MASK_IC_SDA_SETUP)

//2 REG_DW_I2C_IC_ACK_GENERAL_CALL
#define BIT_IC_ACK_GENERAL_CALL               	BIT(0)
#define BIT_SHIFT_IC_ACK_GENERAL_CALL         	0
#define BIT_MASK_IC_ACK_GENERAL_CALL          	0x1
#define BIT_CTRL_IC_ACK_GENERAL_CALL(x)       	(((x) & BIT_MASK_IC_ACK_GENERAL_CALL) << BIT_SHIFT_IC_ACK_GENERAL_CALL)

//2 REG_DW_I2C_IC_ENABLE_STATUS
#define BIT_IC_ENABLE_STATUS_SLV_RX_DATA_LOST 	BIT(2)
#define BIT_SHIFT_IC_ENABLE_STATUS_SLV_RX_DATA_LOST	2
#define BIT_MASK_IC_ENABLE_STATUS_SLV_RX_DATA_LOST	0x1
#define BIT_CTRL_IC_ENABLE_STATUS_SLV_RX_DATA_LOST(x)	(((x) & BIT_MASK_IC_ENABLE_STATUS_SLV_RX_DATA_LOST) << BIT_SHIFT_IC_ENABLE_STATUS_SLV_RX_DATA_LOST)

#define BIT_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY	BIT(1)
#define BIT_SHIFT_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY	1
#define BIT_MASK_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY	0x1
#define BIT_CTRL_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY(x)	(((x) & BIT_MASK_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY) << BIT_SHIFT_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY)

#define BIT_IC_ENABLE_STATUS_IC_EN            	BIT(0)
#define BIT_SHIFT_IC_ENABLE_STATUS_IC_EN      	0
#define BIT_MASK_IC_ENABLE_STATUS_IC_EN       	0x1
#define BIT_CTRL_IC_ENABLE_STATUS_IC_EN(x)    	(((x) & BIT_MASK_IC_ENABLE_STATUS_IC_EN) << BIT_SHIFT_IC_ENABLE_STATUS_IC_EN)

//2 REG_DW_I2C_IC_COMP_PARAM_1

#define BIT_SHIFT_IC_COMP_PARAM_1_TX_BUFFER_DEPTH 16
#define BIT_MASK_IC_COMP_PARAM_1_TX_BUFFER_DEPTH 0xff
#define BIT_IC_COMP_PARAM_1_TX_BUFFER_DEPTH(x)	(((x) & BIT_MASK_IC_COMP_PARAM_1_TX_BUFFER_DEPTH) << BIT_SHIFT_IC_COMP_PARAM_1_TX_BUFFER_DEPTH)
#define BIT_CTRL_IC_COMP_PARAM_1_TX_BUFFER_DEPTH(x)	(((x) & BIT_MASK_IC_COMP_PARAM_1_TX_BUFFER_DEPTH) << BIT_SHIFT_IC_COMP_PARAM_1_TX_BUFFER_DEPTH)
#define BIT_GET_IC_COMP_PARAM_1_TX_BUFFER_DEPTH(x)	(((x) >> BIT_SHIFT_IC_COMP_PARAM_1_TX_BUFFER_DEPTH) & BIT_MASK_IC_COMP_PARAM_1_TX_BUFFER_DEPTH)

#define BIT_SHIFT_IC_COMP_PARAM_1_RX_BUFFER_DEPTH 8
#define BIT_MASK_IC_COMP_PARAM_1_RX_BUFFER_DEPTH 0xff
#define BIT_IC_COMP_PARAM_1_RX_BUFFER_DEPTH(x)	(((x) & BIT_MASK_IC_COMP_PARAM_1_RX_BUFFER_DEPTH) << BIT_SHIFT_IC_COMP_PARAM_1_RX_BUFFER_DEPTH)
#define BIT_CTRL_IC_COMP_PARAM_1_RX_BUFFER_DEPTH(x)	(((x) & BIT_MASK_IC_COMP_PARAM_1_RX_BUFFER_DEPTH) << BIT_SHIFT_IC_COMP_PARAM_1_RX_BUFFER_DEPTH)
#define BIT_GET_IC_COMP_PARAM_1_RX_BUFFER_DEPTH(x)	(((x) >> BIT_SHIFT_IC_COMP_PARAM_1_RX_BUFFER_DEPTH) & BIT_MASK_IC_COMP_PARAM_1_RX_BUFFER_DEPTH)

#define BIT_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS	BIT(7)
#define BIT_SHIFT_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS	7
#define BIT_MASK_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS	0x1
#define BIT_CTRL_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS(x)	(((x) & BIT_MASK_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS) << BIT_SHIFT_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS)

#define BIT_IC_COMP_PARAM_1_HAS_DMA           	BIT(6)
#define BIT_SHIFT_IC_COMP_PARAM_1_HAS_DMA     	6
#define BIT_MASK_IC_COMP_PARAM_1_HAS_DMA      	0x1
#define BIT_CTRL_IC_COMP_PARAM_1_HAS_DMA(x)   	(((x) & BIT_MASK_IC_COMP_PARAM_1_HAS_DMA) << BIT_SHIFT_IC_COMP_PARAM_1_HAS_DMA)

#define BIT_IC_COMP_PARAM_1_INTR_IO           	BIT(5)
#define BIT_SHIFT_IC_COMP_PARAM_1_INTR_IO     	5
#define BIT_MASK_IC_COMP_PARAM_1_INTR_IO      	0x1
#define BIT_CTRL_IC_COMP_PARAM_1_INTR_IO(x)   	(((x) & BIT_MASK_IC_COMP_PARAM_1_INTR_IO) << BIT_SHIFT_IC_COMP_PARAM_1_INTR_IO)

#define BIT_IC_COMP_PARAM_1_HC_COUNT_VALUES   	BIT(4)
#define BIT_SHIFT_IC_COMP_PARAM_1_HC_COUNT_VALUES	4
#define BIT_MASK_IC_COMP_PARAM_1_HC_COUNT_VALUES	0x1
#define BIT_CTRL_IC_COMP_PARAM_1_HC_COUNT_VALUES(x)	(((x) & BIT_MASK_IC_COMP_PARAM_1_HC_COUNT_VALUES) << BIT_SHIFT_IC_COMP_PARAM_1_HC_COUNT_VALUES)

#define BIT_SHIFT_IC_COMP_PARAM_1_MAX_SPEED_MODE 2
#define BIT_MASK_IC_COMP_PARAM_1_MAX_SPEED_MODE 0x3
#define BIT_IC_COMP_PARAM_1_MAX_SPEED_MODE(x) 	(((x) & BIT_MASK_IC_COMP_PARAM_1_MAX_SPEED_MODE) << BIT_SHIFT_IC_COMP_PARAM_1_MAX_SPEED_MODE)
#define BIT_CTRL_IC_COMP_PARAM_1_MAX_SPEED_MODE(x)	(((x) & BIT_MASK_IC_COMP_PARAM_1_MAX_SPEED_MODE) << BIT_SHIFT_IC_COMP_PARAM_1_MAX_SPEED_MODE)
#define BIT_GET_IC_COMP_PARAM_1_MAX_SPEED_MODE(x)	(((x) >> BIT_SHIFT_IC_COMP_PARAM_1_MAX_SPEED_MODE) & BIT_MASK_IC_COMP_PARAM_1_MAX_SPEED_MODE)

#define BIT_SHIFT_IC_COMP_PARAM_1_APB_DATA_WIDTH 0
#define BIT_MASK_IC_COMP_PARAM_1_APB_DATA_WIDTH 0x3
#define BIT_IC_COMP_PARAM_1_APB_DATA_WIDTH(x) 	(((x) & BIT_MASK_IC_COMP_PARAM_1_APB_DATA_WIDTH) << BIT_SHIFT_IC_COMP_PARAM_1_APB_DATA_WIDTH)
#define BIT_CTRL_IC_COMP_PARAM_1_APB_DATA_WIDTH(x)	(((x) & BIT_MASK_IC_COMP_PARAM_1_APB_DATA_WIDTH) << BIT_SHIFT_IC_COMP_PARAM_1_APB_DATA_WIDTH)
#define BIT_GET_IC_COMP_PARAM_1_APB_DATA_WIDTH(x)	(((x) >> BIT_SHIFT_IC_COMP_PARAM_1_APB_DATA_WIDTH) & BIT_MASK_IC_COMP_PARAM_1_APB_DATA_WIDTH)

//2 REG_DW_I2C_IC_COMP_VERSION

#define BIT_SHIFT_IC_COMP_VERSION 0
#define BIT_MASK_IC_COMP_VERSION 0xffffffffL
#define BIT_IC_COMP_VERSION(x)                	(((x) & BIT_MASK_IC_COMP_VERSION) << BIT_SHIFT_IC_COMP_VERSION)
#define BIT_CTRL_IC_COMP_VERSION(x)           	(((x) & BIT_MASK_IC_COMP_VERSION) << BIT_SHIFT_IC_COMP_VERSION)
#define BIT_GET_IC_COMP_VERSION(x)            	(((x) >> BIT_SHIFT_IC_COMP_VERSION) & BIT_MASK_IC_COMP_VERSION)

//2 REG_DW_I2C_IC_COMP_TYPE

#define BIT_SHIFT_IC_COMP_TYPE 0
#define BIT_MASK_IC_COMP_TYPE 0xffffffffL
#define BIT_IC_COMP_TYPE(x)                   	(((x) & BIT_MASK_IC_COMP_TYPE) << BIT_SHIFT_IC_COMP_TYPE)
#define BIT_CTRL_IC_COMP_TYPE(x)              	(((x) & BIT_MASK_IC_COMP_TYPE) << BIT_SHIFT_IC_COMP_TYPE)
#define BIT_GET_IC_COMP_TYPE(x)               	(((x) >> BIT_SHIFT_IC_COMP_TYPE) & BIT_MASK_IC_COMP_TYPE)

//======================== Register Address Definition ========================
#define REG_DW_I2C_IC_CON 0x0000
#define REG_DW_I2C_IC_TAR 0x0004
#define REG_DW_I2C_IC_SAR 0x0008
#define REG_DW_I2C_IC_HS_MADDR 0x000C
#define REG_DW_I2C_IC_DATA_CMD 0x0010
#define REG_DW_I2C_IC_SS_SCL_HCNT 0x0014
#define REG_DW_I2C_IC_SS_SCL_LCNT 0x0018
#define REG_DW_I2C_IC_FS_SCL_HCNT 0x001C
#define REG_DW_I2C_IC_FS_SCL_LCNT 0x0020
#define REG_DW_I2C_IC_HS_SCL_HCNT 0x0024
#define REG_DW_I2C_IC_HS_SCL_LCNT 0x0028
#define REG_DW_I2C_IC_INTR_STAT 0x002C
#define REG_DW_I2C_IC_INTR_MASK 0x0030
#define REG_DW_I2C_IC_RAW_INTR_STAT 0x0034
#define REG_DW_I2C_IC_RX_TL 0x0038
#define REG_DW_I2C_IC_TX_TL 0x003C
#define REG_DW_I2C_IC_CLR_INTR 0x0040
#define REG_DW_I2C_IC_CLR_RX_UNDER 0x0044
#define REG_DW_I2C_IC_CLR_RX_OVER 0x0048
#define REG_DW_I2C_IC_CLR_TX_OVER 0x004C
#define REG_DW_I2C_IC_CLR_RD_REQ 0x0050
#define REG_DW_I2C_IC_CLR_TX_ABRT 0x0054
#define REG_DW_I2C_IC_CLR_RX_DONE 0x0058
#define REG_DW_I2C_IC_CLR_ACTIVITY 0x005C
#define REG_DW_I2C_IC_CLR_STOP_DET 0x0060
#define REG_DW_I2C_IC_CLR_START_DET 0x0064
#define REG_DW_I2C_IC_CLR_GEN_CALL 0x0068
#define REG_DW_I2C_IC_ENABLE 0x006C
#define REG_DW_I2C_IC_STATUS 0x0070
#define REG_DW_I2C_IC_TXFLR 0x0074
#define REG_DW_I2C_IC_RXFLR 0x0078
#define REG_DW_I2C_IC_SDA_HOLD 0x007C
#define REG_DW_I2C_IC_TX_ABRT_SOURCE 0x0080
#define REG_DW_I2C_IC_SLV_DATA_NACK_ONLY 0x0084
#define REG_DW_I2C_IC_DMA_CR 0x0088
#define REG_DW_I2C_IC_DMA_TDLR 0x008C
#define REG_DW_I2C_IC_DMA_RDLR 0x0090
#define REG_DW_I2C_IC_SDA_SETUP 0x0094
#define REG_DW_I2C_IC_ACK_GENERAL_CALL 0x0098
#define REG_DW_I2C_IC_ENABLE_STATUS 0x009C
#define REG_DW_I2C_IC_COMP_PARAM_1 0x00F4
#define REG_DW_I2C_IC_COMP_VERSION 0x00F8
#define REG_DW_I2C_IC_COMP_TYPE 0x00FC

//======================================================
// I2C related enumeration
// I2C Address Mode
typedef enum _I2C_ADDR_MODE_
{
  I2C_ADDR_7BIT = 0,
  I2C_ADDR_10BIT = 1,
} I2C_ADDR_MODE, *PI2C_ADDR_MODE;

// I2C Speed Mode
typedef enum _I2C_SPD_MODE_
{
  I2C_SS_MODE = 1,
  I2C_FS_MODE = 2,
  I2C_HS_MODE = 3,
} I2C_SPD_MODE, *PI2C_SPD_MODE;

//I2C Timing Parameters
#define I2C_SS_MIN_SCL_HTIME    4000    //the unit is ns.
#define I2C_SS_MIN_SCL_LTIME    4700    //the unit is ns.

#define I2C_FS_MIN_SCL_HTIME    600     //the unit is ns.
#define I2C_FS_MIN_SCL_LTIME    1300    //the unit is ns.

#define I2C_HS_MIN_SCL_HTIME_100    60      //the unit is ns, with bus loading = 100pf
#define I2C_HS_MIN_SCL_LTIME_100    120     //the unit is ns., with bus loading = 100pf

#define I2C_HS_MIN_SCL_HTIME_400    160     //the unit is ns, with bus loading = 400pf
#define I2C_HS_MIN_SCL_LTIME_400    320     //the unit is ns., with bus loading = 400pf

//======================================================
//I2C Essential functions and macros
_LONG_CALL_ROM_ VOID HalI2CWrite32(IN u8 I2CIdx, IN u8 I2CReg, IN u32 I2CVal);
_LONG_CALL_ROM_ u32 HalI2CRead32(IN u8 I2CIdx, IN u8 I2CReg);

#define HAL_I2C_WRITE32(I2CIdx, addr, value)    HalI2CWrite32(I2CIdx,addr,value)
#define HAL_I2C_READ32(I2CIdx, addr)            HalI2CRead32(I2CIdx,addr)

// Rtl8195a I2C function prototypes
_LONG_CALL_ HAL_STATUS HalI2CEnableRtl8195a(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CInit8195a(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CDeInit8195a(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS HalI2CSetCLKRtl8195a(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CMassSendRtl8195a(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CSendRtl8195a(IN VOID *Data);
_LONG_CALL_ u8 HalI2CReceiveRtl8195a(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS HalI2CIntrCtrl8195a(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CClrIntrRtl8195a(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS HalI2CClrAllIntrRtl8195a(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CDMACtrl8195a(IN VOID *Data);
_LONG_CALL_ u32 HalI2CReadRegRtl8195a(IN VOID *Data, IN u8 I2CReg);
_LONG_CALL_ HAL_STATUS HalI2CWriteRegRtl8195a(IN VOID *Data, IN u8 I2CReg, IN u32 RegVal);

//Rtl8195a I2C V02 function prototype
_LONG_CALL_ HAL_STATUS HalI2CSendRtl8195aV02(IN VOID *Data);
#if  defined(CONFIG_CHIP_A_CUT) || defined(CONFIG_CHIP_B_CUT) || defined(CONFIG_CHIP_C_CUT)
_LONG_CALL_ HAL_STATUS HalI2CSetCLKRtl8195aV02(IN VOID *Data);
#elif defined(CONFIG_CHIP_E_CUT)
_LONG_CALL_ROM_ HAL_STATUS HalI2CSetCLKRtl8195aV02(IN VOID *Data);
#endif
//Rtl8195a I2C V02 function prototype  END

//Rtl8195a I2C V04 function prototype
_LONG_CALL_ HAL_STATUS HalI2CSendRtl8195a_V04(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CMassSendRtl8195a_V04(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CInit8195a_V04(IN VOID *Data);
_LONG_CALL_ HAL_STATUS HalI2CSetCLKRtl8195a_V04(IN VOID *Data);
//Rtl8195a I2C V04 function prototype  END

HAL_STATUS HalI2CInit8195a_Patch(IN VOID *Data);
HAL_STATUS HalI2CSendRtl8195a_Patch(IN VOID *Data);
HAL_STATUS HalI2CSetCLKRtl8195a_Patch(IN VOID *Data);
HAL_STATUS HalI2CMassSendRtl8195a_Patch(IN VOID *Data);
HAL_STATUS HalI2CEnableRtl8195a_Patch(IN VOID *Data);

//================= I2C CONFIGURATION START ==================
// I2C SAL User Configuration Flags

// I2C SAL operation types
#define I2C_POLL_OP_TYPE            1
#define I2C_INTR_OP_TYPE            1
#define I2C_DMA_OP_TYPE             1

// I2C supports user register address
#define I2C_USER_REG_ADDR           1       //I2C User specific register address by using
//the first I2C data as the register
//address

// I2C SAL used module. Please set the I2C module flag to 1 to enable the related
// I2C module functions.
#define I2C0_USED                   1
#define I2C1_USED                   1
#define I2C2_USED                   1
#define I2C3_USED                   1
//================= I2C CONFIGURATION END  ===================

//================= I2C HAL START  ==========================
// I2C debug output
#define I2C_PREFIX      "RTL8195A[i2c]: "
#define I2C_PREFIX_LVL  "    [i2c_DBG]: "

typedef enum _I2C_DBG_LVL_
{
  HAL_I2C_LVL = 0x01,
  SAL_I2C_LVL = 0x02,
  VERI_I2C_LVL = 0x03,
} I2C_DBG_LVL, *PI2C_DBG_LVL;

#ifdef CONFIG_DEBUG_LOG
#ifdef CONFIG_DEBUG_LOG_I2C_HAL
#define DBG_I2C_LOG_PERD    100

#define I2CDBGLVL   0xFF
#define DBG_8195A_I2C(...)  do{ \
                                    _DbgDump("\r"I2C_PREFIX __VA_ARGS__);\
                                }while(0)

#define DBG_8195A_I2C_LVL(LVL,...)  do{\
                                            if (LVL&I2CDBGLVL){\
                                                _DbgDump("\r"I2C_PREFIX_LVL __VA_ARGS__);\
                                            }\
                                        }while(0)
#else
#define DBG_I2C_LOG_PERD    100
#define DBG_8195A_I2C(...)
#define DBG_8195A_I2C_LVL(...)
#endif
#else
#define DBG_I2C_LOG_PERD    100
#define DBG_8195A_I2C(...)
#define DBG_8195A_I2C_LVL(...)
#endif

#define I2C_MTR_RTY_CNT     1024
//======================================================
// I2C HAL related enumeration
// I2C Module Selection
typedef enum _I2C_MODULE_SEL_
{
  I2C0_SEL = 0x0,
  I2C1_SEL = 0x1,
  I2C2_SEL = 0x2,
  I2C3_SEL = 0x3,
} I2C_MODULE_SEL, *PI2C_MODULE_SEL;

// I2C HAL initial data structure
typedef struct _HAL_I2C_INIT_DAT_
{
  u8 I2CIdx;         //I2C index used
  u8 I2CEn;          //I2C module enable
  u8 I2CMaster;      //Master or Slave mode
  u8 I2CAddrMod;     //I2C addressing mode(7-bit, 10-bit)

  u8 I2CSpdMod;      //I2C  speed mode(Standard, Fast, High)
  u8 I2CSetup;       //I2C SDA setup time
  u8 I2CRXTL;        //I2C RX FIFO Threshold
  u8 I2CTXTL;        //I2C TX FIFO Threshold

  u8 I2CBusLd;       //I2C bus load (pf) for high speed mode
  u8 I2CReSTR;       //I2C restart support
  u8 I2CGC;          //I2C general support
  u8 I2CStartB;      //I2C start byte support

  u8 I2CSlvNoAck;    //I2C slave no ack support
  u8 I2CDMACtrl;     //I2C DMA feature support
  u8 I2CCmd;         //I2C Command
  u8 I2CDataLen;     //I2C Data Length

  u8 I2CSlvAckGC;    //I2C slave acks to General Call
  u8 I2CStop;        //I2C issues STOP bit or not
  u16 RSVD0;          //Bit0: used to control HalI2CMassSendRtl8195a_Patch sending
                      //      RESTART or not by upper layer SW.

  u8 *I2CRWData;     //I2C Read/Write data pointer

  u16 I2CIntrMSK;     //I2C Interrupt Mask
  u16 I2CIntrClr;     //I2C Interrupt register to clear

  u16 I2CAckAddr;     //I2C target address in I2C Master mode,
                      //ack address in I2C Slave mode
  u16 I2CSdaHd;       //I2C SDA hold time

  u32 I2CClk;         //I2C bus clock (in kHz)

  u8 I2CTxDMARqLv;   //I2C TX DMA Empty Level
  u8 I2CRxDMARqLv;   //I2C RX DMA Full Level
  u16 RSVD1;          //Reserved
} HAL_I2C_INIT_DAT, *PHAL_I2C_INIT_DAT;

// I2C HAL Operations
typedef struct _HAL_I2C_OP_
{
  HAL_STATUS (*HalI2CInit)( VOID *Data );   //HAL I2C initialization
  HAL_STATUS (*HalI2CDeInit)( VOID *Data );   //HAL I2C de-initialization
  HAL_STATUS (*HalI2CSend)( VOID *Data );   //HAL I2C send
  u8 (*HalI2CReceive)( VOID *Data );   //HAL I2C receive
  HAL_STATUS (*HalI2CEnable)( VOID *Data );   //HAL I2C enable module
  HAL_STATUS (*HalI2CIntrCtrl)( VOID *Data );   //HAL I2C interrupt control
  u32 (*HalI2CReadReg)( VOID *Data, u8 I2CReg );   //HAL I2C read register
  HAL_STATUS (*HalI2CWriteReg)( VOID *Data, u8 I2CReg, u32 RegVal );   //HAL I2C write register
  HAL_STATUS (*HalI2CSetCLK)( VOID *Data );   //HAL I2C set bus clock
  HAL_STATUS (*HalI2CMassSend)( VOID *Data );   //HAL I2C mass send
  HAL_STATUS (*HalI2CClrIntr)( VOID *Data );   //HAL I2C clear interrupts
  HAL_STATUS (*HalI2CClrAllIntr)( VOID *Data );   //HAL I2C clear all interrupts
  HAL_STATUS (*HalI2CDMACtrl)( VOID *Data );   //HAL I2C DMA control
} HAL_I2C_OP, *PHAL_I2C_OP;
//================= I2C HAL END   ===========================

//================= I2C SAL START  ==========================
//I2C SAL Macros

//======================================================
// I2C SAL related enumerations
// I2C Extend Features
typedef enum _I2C_EXD_SUPPORT_
{
  I2C_EXD_RESTART = 0x1,            //BIT_0, RESTART bit
  I2C_EXD_GENCALL = 0x2,//BIT_1, Master generates General Call. All "send" operations generate General Call addresss
  I2C_EXD_STARTB = 0x4,            //BIT_2, Using START BYTE, instead of START Bit
  I2C_EXD_SLVNOACK = 0x8,            //BIT_3, Slave no ack to master
  I2C_EXD_BUS400PF = 0x10,           //BIT_4, I2C bus loading is 400pf
  I2C_EXD_SLVACKGC = 0x20,           //BIT_5, Slave acks to a General Call
  I2C_EXD_USER_REG = 0x40,           //BIT_6, Using User Register Address
  I2C_EXD_USER_TWOB = 0x80,           //BIT_7, User Register Address is 2-byte
  I2C_EXD_MTR_ADDR_RTY = 0x100,//BIT_8, Master retries to send start condition and Slave address when the slave doesn't ack
                               //         the address.
  I2C_EXD_MTR_ADDR_UPD = 0x200,         //BIT_9, Master dynamically updates slave address
  I2C_EXD_MTR_HOLD_BUS = 0x400,//BIT_10, Master doesn't generate STOP when the FIFO is empty. This would make Master hold
                                //         the bus.
} I2C_EXD_SUPPORT, *PI2C_EXD_SUPPORT;

// I2C operation type
typedef enum _I2C_OP_TYPE_
{
  I2C_POLL_TYPE = 0x0,
  I2C_DMA_TYPE = 0x1,
  I2C_INTR_TYPE = 0x2,
} I2C_OP_TYPE, *PI2C_OP_TYPE;

// I2C pinmux selection
typedef enum _I2C_PINMUX_
{
  I2C_PIN_S0 = 0x0,
  I2C_PIN_S1 = 0x1,
  I2C_PIN_S2 = 0x2,
  I2C_PIN_S3 = 0x3,    //Only valid for I2C0 and I2C3
} I2C_PINMUX, *PI2C_PINMUX;

// I2C module status
typedef enum _I2C_MODULE_STATUS_
{
  I2C_DISABLE = 0x0,
  I2C_ENABLE = 0x1,
} I2C_MODULE_STATUS, *PI2C_MODULE_STATUS;

// I2C device status
typedef enum _I2C_Device_STATUS_
{
  I2C_STS_UNINITIAL = 0x00,
  I2C_STS_INITIALIZED = 0x01,
  I2C_STS_IDLE = 0x02,

  I2C_STS_TX_READY = 0x03,
  I2C_STS_TX_ING = 0x04,

  I2C_STS_RX_READY = 0x05,
  I2C_STS_RX_ING = 0x06,

  I2C_STS_ERROR = 0x10,
  I2C_STS_TIMEOUT = 0x11,
} I2C_Device_STATUS, *PI2C_Device_STATUS;

// I2C feature status
typedef enum _I2C_FEATURE_STATUS_
{
  I2C_FEATURE_DISABLED = 0,
  I2C_FEATURE_ENABLED = 1,
} I2C_FEATURE_STATUS, *PI2C_FEATURE_STATUS;

// I2C device mode
typedef enum _I2C_DEV_MODE_
{
  I2C_SLAVE_MODE = 0x0,
  I2C_MASTER_MODE = 0x1,
} I2C_DEV_MODE, *PI2C_DEV_MODE;

// I2C Bus Transmit/Receive
typedef enum _I2C_DIRECTION_
{
  I2C_ONLY_TX = 0x1,
  I2C_ONLY_RX = 0x2,
  I2C_TXRX = 0x3,
} I2C_DIRECTION, *PI2C_DIRECTION;

//I2C DMA module number
typedef enum _I2C_DMA_MODULE_SEL_
{
  I2C_DMA_MODULE_0 = 0x0,
  I2C_DMA_MODULE_1 = 0x1
} I2C_DMA_MODULE_SEL, *PI2C_DMA_MODULE_SEL;

// I2C0 DMA peripheral number
typedef enum _I2C0_DMA_PERI_NUM_
{
  I2C0_DMA_TX_NUM = 0x8,
  I2C0_DMA_RX_NUM = 0x9,
} I2C0_DMA_PERI_NUM, *PI2C0_DMA_PERI_NUM;

// I2C1 DMA peripheral number
typedef enum _I2C1_DMA_PERI_NUM_
{
  I2C1_DMA_TX_NUM = 0xA,
  I2C1_DMA_RX_NUM = 0xB,
} I2C1_DMA_PERI_NUM, *PI2C1_DMA_PERI_NUM;

// I2C0 DMA module used
typedef enum _I2C0_DMA_MODULE_
{
  I2C0_DMA0 = 0x0,
  I2C0_DMA1 = 0x1,
} I2C0_DMA_MODULE, *PI2C0_DMA_MODULE;

// I2C0 DMA module used
typedef enum _I2C1_DMA_MODULE_
{
  I2C1_DMA0 = 0x0,
  I2C1_DMA1 = 0x1,
} I2C1_DMA_MODULE, *PI2C1_DMA_MODULE;

// I2C command type
typedef enum _I2C_COMMAND_TYPE_
{
  I2C_WRITE_CMD = 0x0,
  I2C_READ_CMD = 0x1,
} I2C_COMMAND_TYPE, *PI2C_COMMAND_TYPE;

// I2C STOP BIT
typedef enum _I2C_STOP_TYPE_
{
  I2C_STOP_DIS = 0x0,
  I2C_STOP_EN = 0x1,
} I2C_STOP_TYPE, *PI2C_STOP_TYPE;

// I2C error type
typedef enum _I2C_ERR_TYPE_
{
  I2C_ERR_RX_UNDER = 0x01,           //I2C RX FIFO Underflow
  I2C_ERR_RX_OVER = 0x02,           //I2C RX FIFO Overflow
  I2C_ERR_TX_OVER = 0x04,           //I2C TX FIFO Overflow
  I2C_ERR_TX_ABRT = 0x08,           //I2C TX terminated
  I2C_ERR_SLV_TX_NACK = 0x10,           //I2C slave transmission terminated by master NACK,
                                        //but there are data in slave TX FIFO
  I2C_ERR_MST_A_NACK = 0x12,
  I2C_ERR_MST_D_NACK = 0x13,
  I2C_ERR_USER_REG_TO = 0x20,

  I2C_ERR_RX_CMD_TO = 0x21,
  I2C_ERR_RX_FF_TO = 0x22,
  I2C_ERR_TX_CMD_TO = 0x23,
  I2C_ERR_TX_FF_TO = 0x24,

  I2C_ERR_TX_ADD_TO = 0x25,
  I2C_ERR_RX_ADD_TO = 0x26,
} I2C_ERR_TYPE, *PI2C_ERR_TYPE;

// I2C Time Out type
typedef enum _I2C_TIMEOUT_TYPE_
{
  I2C_TIMEOOUT_DISABLE = 0x00,
  I2C_TIMEOOUT_ENDLESS = 0xFFFFFFFF,
} I2C_TIMEOUT_TYPE, *PI2C_TIMEOUT_TYPE;

//======================================================
// SAL I2C related data structures
// I2C user callback adapter
typedef struct _SAL_I2C_USERCB_ADPT_
{
  VOID (*USERCB)( VOID *Data );
  u32 USERData;
} SAL_I2C_USERCB_ADPT, *PSAL_I2C_USERCB_ADPT;

// I2C user callback structure
typedef struct _SAL_I2C_USER_CB_
{
  PSAL_I2C_USERCB_ADPT pTXCB;          //I2C Transmit Callback
  PSAL_I2C_USERCB_ADPT pTXCCB;         //I2C Transmit Complete Callback
  PSAL_I2C_USERCB_ADPT pRXCB;          //I2C Receive Callback
  PSAL_I2C_USERCB_ADPT pRXCCB;         //I2C Receive Complete Callback
  PSAL_I2C_USERCB_ADPT pRDREQCB;       //I2C Read Request Callback
  PSAL_I2C_USERCB_ADPT pERRCB;         //I2C Error Callback
  PSAL_I2C_USERCB_ADPT pDMATXCB;       //I2C DMA Transmit Callback
  PSAL_I2C_USERCB_ADPT pDMATXCCB;      //I2C DMA Transmit Complete Callback
  PSAL_I2C_USERCB_ADPT pDMARXCB;       //I2C DMA Receive Callback
  PSAL_I2C_USERCB_ADPT pDMARXCCB;      //I2C DMA Receive Complete Callback
  PSAL_I2C_USERCB_ADPT pGENCALLCB;     //I2C General Call Callback
} SAL_I2C_USER_CB, *PSAL_I2C_USER_CB;

// I2C Transmit Buffer
typedef struct _SAL_I2C_TRANSFER_BUF_
{
  u16 DataLen;                        //I2C Transmfer Length
  u16 TargetAddr;                     //I2C Target Address. It's only valid in Master Mode.
  u32 RegAddr;                        //I2C Register Address. It's only valid in Master Mode.
  u32 RSVD;                           //
  u8 *pDataBuf;                      //I2C Transfer Buffer Pointer
} SAL_I2C_TRANSFER_BUF, *PSAL_I2C_TRANSFER_BUF;

typedef struct _SAL_I2C_DMA_USER_DEF_
{
  u8 TxDatSrcWdth;
  u8 TxDatDstWdth;
  u8 TxDatSrcBstSz;
  u8 TxDatDstBstSz;
  u8 TxChNo;
  u8 RSVD0;
  u16 RSVD1;
  u8 RxDatSrcWdth;
  u8 RxDatDstWdth;
  u8 RxDatSrcBstSz;
  u8 RxDatDstBstSz;
  u8 RxChNo;
  u8 RSVD2;
  u16 RSVD3;
} SAL_I2C_DMA_USER_DEF, *PSAL_I2C_DMA_USER_DEF;

// RTK I2C OP
typedef struct _RTK_I2C_OP_
{
  HAL_STATUS (*Init)( VOID *Data );
  HAL_STATUS (*DeInit)( VOID *Data );
  HAL_STATUS (*Send)( VOID *Data );
  HAL_STATUS (*Receive)( VOID *Data );
  HAL_STATUS (*IoCtrl)( VOID *Data );
  HAL_STATUS (*PowerCtrl)( VOID *Data );
} RTK_I2C_OP, *PRTK_I2C_OP;

// Software API Level I2C Handler
typedef struct _SAL_I2C_HND_
{
  u8 DevNum;             //I2C device number
  u8 PinMux;             //I2C pin mux seletion
  u8 OpType;             //I2C operation type selection
  volatile u8 DevSts;             //I2C device status

  u8 I2CMaster;          //I2C Master or Slave mode
  u8 I2CAddrMod;         //I2C 7-bit or 10-bit mode
  u8 I2CSpdMod;          //I2C SS/ FS/ HS speed mode
  u8 I2CAckAddr;         //I2C target address in Master
                         //mode or ack address in Slave
                         //mode

  u16 I2CClk;             //I2C bus clock
  u8 MasterRead;         //I2C Master Read Supported,
                         //An Address will be sent before
                         //read data back.

  u8 I2CDmaSel;          //I2C DMA module select
                         //         0 for DMA0,
                         //         1 for DMA1
  u8 I2CTxDMARqLv;       //I2C TX DMA Empty Level
  u8 I2CRxDMARqLv;       //I2C RX DMA Full Level
  u16 RSVD0;              //Reserved

  u32 AddRtyTimeOut;      //I2C TimeOut Value for master send address retry
                          //(Originally Reserved.)

  u32 I2CExd;             //I2C extended options:
                          //bit 0: I2C RESTART supported,
                          //          0 for NOT supported,
                          //          1 for supported
                          //bit 1: I2C General Call supported
                          //          0 for NOT supported,
                          //          1 for supported
                          //bit 2: I2C START Byte supported
                          //          0 for NOT supported,
                          //          1 for supported
                          //bit 3: I2C Slave-No-Ack
                          //         supported
                          //          0 for NOT supported,
                          //          1 for supported
                          //bit 4: I2C bus loading,
                          //          0 for 100pf,
                          //          1  for 400pf
                          //bit 5: I2C slave ack to General
                          //         Call
                          //bit 6: I2C User register address
                          //bit 7: I2C 2-Byte User register
                          //         address
                          //bit 8: I2C slave address no ack retry,
                          //        It's only for Master mode,
                          //        when slave doesn't ack the
                          //        address
                          //bit 31~bit 8: Reserved
  u32 ErrType;            //
  u32 TimeOut;            //I2C IO Timeout count,  in ms

  PHAL_I2C_INIT_DAT pInitDat;           //Pointer to I2C initial data struct
  PSAL_I2C_TRANSFER_BUF pTXBuf;             //Pointer to I2C TX buffer
  PSAL_I2C_TRANSFER_BUF pRXBuf;             //Pointer to I2C RX buffer
  PSAL_I2C_USER_CB pUserCB;            //Pointer to I2C User Callback
  PSAL_I2C_DMA_USER_DEF pDMAConf;           //Pointer to I2C User Define DMA config
} SAL_I2C_HND, *PSAL_I2C_HND;

//======================================================
// I2C SAL Function Prototypes

// For checking I2C input index valid or not
static inline HAL_STATUS
RtkI2CIdxChk(
    IN u8 I2CIdx
)
{
  if (I2CIdx > I2C3_SEL)
  return HAL_ERR_UNKNOWN;

  return HAL_OK;
}
#if 0
//For checking I2C operation type valid or not
static inline HAL_STATUS
RtkI2COpTypeChk(
    IN VOID *Data
)
{
  PSAL_I2C_HND pSalI2CHND = (PSAL_I2C_HND) Data;

  if (pSalI2CHND->OpType == I2C_POLL_TYPE)
  return HAL_ERR_UNKNOWN;

  if (pSalI2CHND->OpType == I2C_DMA_TYPE)
  return HAL_ERR_UNKNOWN;

  if (pSalI2CHND->OpType == I2C_INTR_TYPE)
  return HAL_ERR_UNKNOWN;

  pSalI2CHND = pSalI2CHND;

  return HAL_OK;
}
#endif
//For checking I2C DMA available or not
static inline HAL_STATUS
RtkI2CDMAChk(
    IN VOID *Data
)
{
  PSAL_I2C_HND pSalI2CHND = (PSAL_I2C_HND) Data;

  if (pSalI2CHND->OpType == I2C_DMA_TYPE)
  {
    if (pSalI2CHND->DevNum >= I2C2_SEL)
    return HAL_ERR_UNKNOWN;
  }
  else
  {
    return HAL_ERR_UNKNOWN;
  }

  return HAL_OK;
}

//For checking I2C DMA available or not
static inline HAL_STATUS
RtkI2CDMAInitChk(
    IN VOID *Data
)
{
  PSAL_I2C_HND pSalI2CHND = (PSAL_I2C_HND) Data;

  if (pSalI2CHND->OpType != I2C_DMA_TYPE)
  {
    return HAL_ERR_UNKNOWN;
  }
  else
  {
    return HAL_OK;
  }

}

//======================================================
//SAL I2C management function prototype
_LONG_CALL_ROM_ HAL_STATUS RtkI2CLoadDefault(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS RtkI2CInit(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS RtkI2CDeInit(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS RtkI2CSend(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS RtkI2CReceive(IN VOID *Data);
_LONG_CALL_ROM_ VOID RtkSalI2COpInit(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS RtkI2CSendUserAddr(IN VOID *Data,IN u8 MtrWr);
_LONG_CALL_ROM_ HAL_STATUS RtkI2CIoCtrl(IN VOID *Data);
_LONG_CALL_ROM_ HAL_STATUS RtkI2CPowerCtrl(IN VOID *Data);
_LONG_CALL_ HAL_STATUS RtkI2CInitForPS(IN VOID *Data);
_LONG_CALL_ HAL_STATUS RtkI2CDeInitForPS(IN VOID *Data);
_LONG_CALL_ HAL_STATUS RtkI2CDisablePS(IN VOID *Data);
_LONG_CALL_ HAL_STATUS RtkI2CEnablePS(IN VOID *Data);
//================= I2C SAL END   ===========================

//================= I2C SAL MANAGEMENT START  =================
// I2C SAL management macros
#define SAL_USER_CB_NUM     (sizeof(SAL_I2C_USER_CB) / sizeof(PSAL_I2C_USERCB_ADPT))

//======================================================
// I2C SAL management data structures
// I2C SAL handle private
typedef struct _SAL_I2C_HND_PRIV_
{
  VOID **ppSalI2CHnd;              //Pointer to SAL_I2C_HND pointer
  SAL_I2C_HND SalI2CHndPriv;              //Private SAL_I2C_HND
} SAL_I2C_HND_PRIV, *PSAL_I2C_HND_PRIV;

//I2C SAL management adapter
typedef struct _SAL_I2C_MNGT_ADPT_
{
  PSAL_I2C_HND_PRIV pSalHndPriv;                //Pointer to SAL_I2C_HND
  PHAL_I2C_INIT_DAT pHalInitDat;               //Pointer to HAL I2C initial data( HAL_I2C_INIT_DAT )
  PHAL_I2C_OP pHalOp;                     //Pointer to HAL I2C operation( HAL_I2C_OP )
  VOID (*pHalOpInit)( VOID* );       //Pointer to HAL I2C initialize function
  PIRQ_HANDLE pIrqHnd;                    //Pointer to IRQ handler in SAL layer( IRQ_HANDLE )
  PSAL_I2C_USER_CB pUserCB;                    //Pointer to SAL user callbacks (SAL_I2C_USER_CB )
  volatile u32 MstRDCmdCnt;                //Used for Master Read command count
  volatile u32 InnerTimeOut;               //Used for SAL internal timeout count
  VOID (*pSalIrqFunc)( VOID* );      //Used for SAL I2C interrupt function

  PSAL_I2C_DMA_USER_DEF pDMAConf;                   //Pointer to I2C User Define DMA config
  PHAL_GDMA_ADAPTER pHalTxGdmaAdp;              //Pointer to HAL_GDMA_ADAPTER
  PHAL_GDMA_ADAPTER pHalRxGdmaAdp;              //Pointer to HAL_GDMA_ADAPTER
  PHAL_GDMA_OP pHalGdmaOp;                 //Pointer to HAL_GDMA_OP
  VOID (*pHalGdmaOpInit)( VOID* );   //Pointer to HAL I2C initialize function
  PIRQ_HANDLE pIrqTxGdmaHnd;              //Pointer to IRQ handler for Tx GDMA
  PIRQ_HANDLE pIrqRxGdmaHnd;              //Pointer to IRQ handler for Rx GDMA
  VOID (*pSalDMATxIrqFunc)( VOID* ); //Used for SAL I2C interrupt function
  VOID (*pSalDMARxIrqFunc)( VOID* ); //Used for SAL I2C interrupt function
  u32 RSVD;                       //Reserved
} SAL_I2C_MNGT_ADPT, *PSAL_I2C_MNGT_ADPT;

//======================================================
//SAL I2C management function prototype
PSAL_I2C_MNGT_ADPT RtkI2CGetMngtAdpt(IN u8 I2CIdx);
HAL_STATUS RtkI2CFreeMngtAdpt(IN PSAL_I2C_MNGT_ADPT pSalI2CMngtAdpt);
PSAL_I2C_HND RtkI2CGetSalHnd(IN u8 I2CIdx);
HAL_STATUS RtkI2CFreeSalHnd(IN PSAL_I2C_HND pSalI2CHND);
u32 RtkSalI2CSts(IN VOID *Data);

extern _LONG_CALL_ VOID I2CISRHandle(IN VOID *Data);
extern _LONG_CALL_ VOID I2CTXGDMAISRHandle(IN VOID *Data);
extern _LONG_CALL_ VOID I2CRXGDMAISRHandle(IN VOID *Data);
extern HAL_STATUS I2CIsTimeout (IN u32 StartCount, IN u32 TimeoutCnt);
extern HAL_TIMER_OP HalTimerOp;
//======================================================
// Function Prototypes
_LONG_CALL_ VOID HalI2COpInit(IN VOID *Data);
//================= I2C SAL MANAGEMENT END   ==================

//================= Rtl8195a I2C V02 function prototype  ============
_LONG_CALL_ VOID HalI2COpInitV02(IN VOID *Data);
_LONG_CALL_ VOID I2CISRHandleV02(IN VOID *Data);
_LONG_CALL_ HAL_STATUS RtkI2CSendV02(IN VOID *Data);
_LONG_CALL_ HAL_STATUS RtkI2CReceiveV02(IN VOID *Data);
_LONG_CALL_ VOID RtkSalI2COpInitV02(IN VOID *Data);
//================= Rtl8195a I2C V02 function prototype  END==========

//================= Rtl8195a I2C V04 function prototype  ============
_LONG_CALL_ VOID HalI2COpInit_V04(IN VOID *Data);
_LONG_CALL_ VOID I2CISRHandle_V04(IN VOID *Data);
//================= Rtl8195a I2C V04 function prototype  END==========

//======================================================
//SAL I2C patch function prototype
HAL_STATUS RtkI2CSend_Patch(IN VOID *Data);
HAL_STATUS RtkI2CReceive_Patch(IN VOID *Data);
VOID HalI2COpInit_Patch(IN VOID *Data);
VOID I2CISRHandle_Patch(IN VOID *Data);

#ifndef CONFIG_RELEASE_BUILD_LIBRARIES
#define RtkI2CSend RtkI2CSend_Patch
#define RtkI2CReceive RtkI2CReceive_Patch
#endif
HAL_STATUS RtkI2CSend_Patch(IN VOID *Data);
HAL_STATUS RtkI2CReceive_Patch(IN VOID *Data);
//================= I2C SAL END   ===========================

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* __RTL8195AM_I2C_H__ */
